{"remainingRequest":"D:\\86181\\Desktop\\product\\pcs-product-view\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\86181\\Desktop\\product\\pcs-product-view\\src\\views\\product-definition\\pd-framework-def\\pd-structure-def\\account-def\\index.vue?vue&type=template&id=f73761ce&scoped=true&","dependencies":[{"path":"D:\\86181\\Desktop\\product\\pcs-product-view\\src\\views\\product-definition\\pd-framework-def\\pd-structure-def\\account-def\\index.vue","mtime":1609847106855},{"path":"D:\\86181\\Desktop\\product\\pcs-product-view\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1706753187435},{"path":"D:\\86181\\Desktop\\product\\pcs-product-view\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1706753192021},{"path":"D:\\86181\\Desktop\\product\\pcs-product-view\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1706753187435},{"path":"D:\\86181\\Desktop\\product\\pcs-product-view\\node_modules\\vue-loader\\lib\\index.js","mtime":1706753190941}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:
<cus-wraper>
  <div :class="{ 'showDiv': this.showPageFlag === '1' }"></div>
  <!-- 产品信息 -->
  <cus-product-info></cus-product-info>

  <!-- 快捷定义 -->
  <cus-condition :disabled="!!accountCode" :label="$t('pdtempPdAcc.quick_def')"
                 @show="quickshow=!quickshow"></cus-condition>

  <div v-if="quickshow">
    <cus-form-title :label="$t('pdtempPdAcc.accquickdef')"></cus-form-title>
    <el-form ref="form_quick" :model="params_quick" :rules="rules_quick" label-width="auto">
      <el-row :gutter="10">
        <cus-col :span="7">
          <el-form-item :label="$t('applyAudit.pdDetailType')">
            <cus-select v-model="params_quick.pdRegionType" :codetype="'ProductCategory'" clearable filterable
                        @change="selectedDetailTypeChanged">
            </cus-select>
          </el-form-item>
        </cus-col>
        <cus-col :span="7">
          <el-form-item :label="$t('ProductAttributeDefinition.referenceProducts')">
            <el-select v-model="params_quick.selectPdId" clearable
                       filterable>
              <el-option v-for="product in productList" :key="product.id" :label="product.pdCode+':'+product.pdName"
                         :value="product.id"></el-option>
            </el-select>
          </el-form-item>
        </cus-col>
      </el-row>
      <el-row :gutter="10">
        <el-col :span="7">
          <el-form-item :label="$t('pdtempPdAcc.accounttype')">
            <cus-cascader :codetype="'accounttype'" clearable @change="getReferenceAccountList"></cus-cascader>
          </el-form-item>
        </el-col>
        <el-col :span="7">
          <el-form-item :label="$t('pdtempPdAcc.pdaccname')" prop="pdAccName">
            <el-input v-model="params_quick.pdAccName" clearable></el-input>
          </el-form-item>

        </el-col>
        <cus-btn-wrapper>
          <el-button v-auth="'select:AllPdAccount'" icon="el-icon-search" size="small"
                     type="primary" @click="handleSearchInAllAcc">
            {{ $t('table.search') }}
          </el-button>
        </cus-btn-wrapper>
      </el-row>
    </el-form>
    <cus-table-title :label="$t('pdtempPdAcc.pdtemppdacc')"></cus-table-title>
    <el-table :data="quickTableData" border element-loading-text="Loading" fit
              highlight-current-row size="mini">
      <el-table-column :label="$t('table.id')" align="center" type="index">
        <template v-slot="scope">
          {{ initTableIndex('pageAccount', scope.$index) }}
        </template>
      </el-table-column>
      <el-table-column :label="$t('table.detail')" type="expand">
        <template slot-scope="props">
          <el-form class="demo-table-expand" inline label-position="left">

            <el-form-item :label="$t('pdtempPdAcc.accfintype')">
              <span>{{ props.row.accFinType | filter_accFinType }}</span>
            </el-form-item>

            <el-form-item :label="$t('pdtempPdAcc.accinvesttype')">
              <span>{{ props.row.accInvestType | filter_accInvestType }}</span>
            </el-form-item>

            <el-form-item :label="$t('pdtempPdAcc.acccreplace')">
              <span>{{ props.row.accCrtDate }}</span>
            </el-form-item>

            <el-form-item :label="$t('pdtempPdAcc.acccrtdate')">
              <span>{{ props.row.accCrePlace | filter_accCrePlace }}</span>
            </el-form-item>

            <el-form-item :label="$t('pdtempPdAcc.accdealday')">
              <span>{{ props.row.accDealDay }}</span>
            </el-form-item>
            <el-form-item :label="$t('pdtempPdAcc.accdealinstmode')">
              <span>{{ props.row.accDealInstMode | filter_accDealInstMode }}</span>
            </el-form-item>

            <el-form-item>
              <el-button size="small" type="text" @click="showAccountFee(props.row)">
                {{ $t('pdtempPdAcc.pdAccDetail') }}
              </el-button>
            </el-form-item>
          </el-form>
        </template>
      </el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.pdacccode')" align="center"
                       prop="accountCode"></el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.pdaccname')" align="center" prop="accountName">
      </el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.accounttype')" align="center" prop="accountType">
        <template v-slot="scope">{{ scope.row.accountType | filter_accountType }}</template>
      </el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.found')" align="center" prop="accFundFlag">
      </el-table-column>

      <el-table-column :label="$t('pdtempPdAcc.accountowner')" align="center" prop="accountOwner">
        <template v-slot="scope">{{ scope.row.accountOwner | filter_accountOwner }}</template>
      </el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.accountcurrency')" align="center" prop="accountCurrency">
        <template v-slot="scope">{{ scope.row.accountCurrency | filter_currency }}</template>
      </el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.accdealfreq')" align="center" prop="accDealFreq">
        <template v-slot="scope">{{ scope.row.accDealFreq | filter_danwei }}</template>
      </el-table-column>
      <el-table-column :label="$t('pdtempPdInsuAgeInfo.operation')" align="center" width="150px">
        <template slot-scope="scope">
          <el-button v-auth="'pdtemp-pd-prem:copyPremium'" size="small" type="primary"
                     @click="copyPremiumToCurrentProduct(scope.row)"><i
            class="el-icon-document-copy"></i>{{ $t('pdtempPdAcc.copyAccout') }}
          </el-button>
        </template>
      </el-table-column>
    </el-table>
    <cus-pagination ref="pageAccount" v-model="quickTableData" :pageSize="10" :params="params_quick"
                    url="/pdtemp-pd-acc/base/AllPdAccount"/>
  </div>
  <br/>

  <!-- 产品账户表格 -->
  <div id="table_def">
    <cus-table-title :label="$t('pdtempPdAcc.productAccount')"></cus-table-title>
    <div v-if="form_combination.accfee">
      <el-table ref="singleTable" :data="configs" border element-loading-text="Loading" highlight-current-row
                size="mini" @row-click="rowClickselectedAccount">
        <el-table-column :label="$t('pdtempPdAcc.choose')" align="center" width="50">
          <template slot-scope="scope">
            <el-radio-group v-model="selectedAccount" @change="selectedAccountChanged">
              <el-radio :label="scope.row">{{ '' }}</el-radio>
            </el-radio-group>
          </template>
        </el-table-column>
        <el-table-column :label="$t('table.id')" align="center" type="index" width="50"></el-table-column>
        <el-table-column :label="$t('pdtempPdAcc.pdacccode')" align="center" prop="pdAccCode"></el-table-column>
        <el-table-column :label="$t('pdtempPdAcc.pdaccname')" align="center" prop="pdAccName"></el-table-column>
        <el-table-column :label="$t('pdtempPdAcc.accounttype')" align="center" prop="pdAccountType">
          <template v-slot="scope">
            {{ scope.row.pdAccountType | filter_accountType }}
          </template>
        </el-table-column>
        <el-table-column :label="$t('pdtempPdAcc.accountowner')" align="center" prop="pdAccountOwner">
          <template v-slot="scope">
            {{ scope.row.pdAccountOwner | filter_accountOwner }}
          </template>
        </el-table-column>
        <el-table-column :label="$t('pdtempPdAcc.accountcurrency')" align="center">
          <template v-slot="scope">
            {{ scope.row.pdAccountCurrency | filter_currency }}
          </template>
        </el-table-column>
        <el-table-column :label="$t('pdtempPdAcc.accdealfreq')" align="center" prop="pdAccDealFreq">
          <template v-slot="scope">
            {{ scope.row.pdAccDealFreq | filter_accDealFreq }}
          </template>
        </el-table-column>
        <el-table-column :label="$t('pdtempPdAcc.pdaccfeecount')" align="center" prop="feeCount"></el-table-column>
        <el-table-column :label="$t('pdtempPdAcc.accinvestcount')" align="center" prop="fundCount"></el-table-column>
        <el-table-column :label="$t('pdtempPdAcc.capInCount')" align="center" prop="capInCount"></el-table-column>
        <el-table-column :label="$t('pdtempPdAcc.capOutCount')" align="center" prop="capOutCount"></el-table-column>
        <el-table-column :label="$t('pay_def.operation')" align="center" width="100px">
          <template slot-scope="scope">
            <cus-del-btn v-auth="'delete:accountDelete'" @ok="accountDelete(scope.row)"></cus-del-btn>
          </template>
        </el-table-column>
      </el-table>
    </div>
  </div>

  <!--tab页面-->
  <div style="margin-top: 20px">
    <el-tabs v-model="activatedName" type="border-card" @tab-click="tabClick">
      <!--产品账户定义-->
      <el-tab-pane :label="$t('pdtempPdAcc.account_menu')" name="account">
        <!-- 账户结构定义 -->
        <cus-form-title :label="$t('pdtempPdAcc.AccountStructureDefinition')"></cus-form-title>
        <el-form ref="form_account" :model="form_account" :rules="form_account_rules" label-width="130px">
          <el-row :gutter="3" type="flex">
            <el-col :span="8">
              <el-form-item :label="$t('pdgenlAccount.accountType')" prop="pdAccountType">
                <cus-cascader v-model="form_account.pdAccountType" :codetype="'accounttype'"
                              @change="afterSelectAccountType"></cus-cascader>
              </el-form-item>
            </el-col>
            <el-col :span="16">
              <el-form-item :label="$t('pdgenlAccount.accountName')" prop="pdAccName">
                <el-input v-model="form_account.pdAccName" :placeholder="$t('pdgenlAccount.accountName')"
                          clearable></el-input>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row justify="center" type="flex">
            <el-col>
              <el-form-item :label="$t('pdgenlAccount.accFinType')">
                <cus-radio v-model="form_account.pdAccFinType" :codetype="'accFinType'" disabled></cus-radio>
              </el-form-item>
            </el-col>
            <el-col>
              <el-form-item :label="$t('pdgenlAccount.accountOwner')" prop="pdAccountOwner">
                <cus-radio v-model="form_account.pdAccountOwner" :codetype="'accountOwner'"
                           :isRequired="true"></cus-radio>
              </el-form-item>
            </el-col>
            <el-col>
              <el-form-item :label="$t('pdgenlAccount.accInvestType')" prop="pdAccInvestType">
                <el-col>
                  <cus-select v-model="form_account.pdAccInvestType" :codetype="'accinvtype'"></cus-select>
                </el-col>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row justify="center" type="flex">
            <el-col>
              <el-form-item :label="$t('pdgenlAccount.accountCurrency')" prop="pdAccountCurrency">
                <el-col>
                  <cus-select v-model="form_account.pdAccountCurrency" :codetype="'productCurrency'"></cus-select>
                </el-col>
              </el-form-item>
            </el-col>
            <el-col>
              <el-form-item :label="$t('pdgenlAccount.accCrePlace')" prop="pdAccCrePlace">
                <el-col>
                  <cus-select v-model="form_account.pdAccCrePlace" :codetype="'accbuildpoint'"></cus-select>
                </el-col>
              </el-form-item>
            </el-col>
            <el-col>
              <el-form-item :label="$t('pdgenlAccount.accCrtDate')" prop="pdAccCrtDate">
                <el-col>
                  <div class="block">
                    <cus-select v-model="form_account.pdAccCrtDate" :codetype="'accbuilddate'"></cus-select>
                  </div>
                </el-col>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row justify="center" type="flex">
            <el-col>
              <el-form-item :label="$t('pdgenlAccount.accDealFreq')" prop="pdAccDealFreq">
                <el-col>
                  <cus-select v-model="form_account.pdAccDealFreq" :codetype="'settlementfrequency'"></cus-select>
                </el-col>
              </el-form-item>
            </el-col>
            <el-col>
              <el-form-item :label="$t('pdgenlAccount.accDealDay')" prop="pdAccDealDay">
                <el-col>
                  <el-input v-model="form_account.pdAccDealDay" clearable>
                    <template slot="suffix">{{ $t('pdgenlAccount.day') }}</template>
                  </el-input>
                </el-col>
              </el-form-item>
            </el-col>
            <el-col>
              <el-form-item :label="$t('pdgenlAccount.accDealInstMode')" prop="pdAccDealInstMode">
                <el-col>
                  <cus-select v-model="form_account.pdAccDealInstMode" :codetype="'calsetmet'"></cus-select>
                </el-col>
              </el-form-item>
            </el-col>
          </el-row>
        </el-form>

        <!--账户利率-->
        <cus-form-title :label="$t('pdtempPdAcc.AccountSecurityInterestRateDefinition')"></cus-form-title>
        <cus-table-title :label="$t('pdtempPdAcc.pdaccountrate')"></cus-table-title>
        <div style="margin: 0 25px 0 25px">
          <div v-if="form_combination.pdaccratede" style="margin: 0 21px 0 1px">
            <el-table :data="listByProductAccount" border element-loading-text="Loading" highlight-current-row
                      size="mini" style=" margin: 0 0 0 0">
              <el-table-column :label="$t('table.id')" align="center" type="index" width="50%"></el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.cloum1')" align="center" width="160%">
                <template v-slot="scope">
                  <el-date-picker v-model="scope.row.pdVailStartDate" type="date"></el-date-picker>
                </template>
              </el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.cloum2')" align="center" width="160%">
                <template v-slot="scope">
                  <el-date-picker v-model="scope.row.pdVailEndDate" type="date"></el-date-picker>
                </template>
              </el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.cloum3')" align="center" width="150%">
                <template v-slot="scope">
                  <el-input-number v-model="scope.row.pdAnnuRate" v-unit :max="100" :min="0"
                                   :placeholder="$t('pdtempPdAcc.placeholderNum')"
                                   :precision="2"
                                   :step="5" controls-position="right" size="mini"></el-input-number>
                </template>
              </el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.cloum4')" align="center" width="150%">
                <template v-slot="scope">
                  <el-input-number v-model="scope.row.pdMonRate" v-unit :max="100" :min="0"
                                   :placeholder="$t('pdtempPdAcc.placeholderNum')"
                                   :precision="2"
                                   :step="5" controls-position="right" size="mini"></el-input-number>
                </template>
              </el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.cloum5')" align="center" width="150%">
                <template v-slot="scope">
                  <el-input-number v-model="scope.row.pdDayRate" v-unit :max="100" :min="0"
                                   :placeholder="$t('pdtempPdAcc.placeholderNum')"
                                   :precision="2"
                                   :step="5" controls-position="right" size="mini"></el-input-number>
                </template>
              </el-table-column>
              <el-table-column :label="$t('table.actions')" align="center" fixed="right" width="100%">
                <template v-slot="scope">
                  <el-button dialog-disable="disable" size="mini" type="danger" @click="deleteRate(scope.row)">-
                  </el-button>
                </template>
              </el-table-column>
            </el-table>
            <el-button dialog-disable="disable" size="mini" type="primary" @click="addRate">+</el-button>
          </div>
        </div>
        <el-form label-width="160px">
          <el-form-item align="right">
            <el-button v-auth="'pdtemp-pd-acc:rate:addAll'" :style="{ display: add}" dialog-disable="disable"
                       icon="el-icon-success"
                       size="small"
                       type="primary" @click="addAccountAndRate">{{ $t('table.save') }}
            </el-button>
            <el-button v-auth="'AccountAndRate:addAll'" :style="{ display: update}" dialog-disable="disable"
                       icon="el-icon-success"
                       size="small"
                       type="primary" @click="updateAccountAndRate">{{ $t('table.update') }}
            </el-button>
            <el-button dialog-disable="disable" icon="el-icon-refresh el-icon--left" size="small" type="primary"
                       @click="resetAccountAndRate">
              {{ $t('pdgenlAccount.account_refresh') }}
            </el-button>
          </el-form-item>
        </el-form>
        <div>

          <!--账户投资标的-->
          <cus-form-title :display="pdAccFundList.length!==0" :label="$t('pdtempPdAcc.accfoundde')"
                          :showArrow="true"
                          @show="form_combination.pdaccfoundde = !form_combination.pdaccfoundde"/>
          <div v-show="form_combination.pdaccfoundde" style="margin: 0 25px 0 25px">

            <el-button dialog-disable="disable" size="small" type="primary" @click="showGeneralFund">
              {{ $t('pdtempPdAcc.foundDeAssociate') }}
            </el-button>
            <!--已关联投资标的-->
            <cus-table-title :label="$t('pdtempPdAcc.foundDeAssociatedList')"/>
            <el-table :data="pdAccFundList" border element-loading-text="Loading" highlight-current-row size="mini"
                      style=" margin: 0 0 0 0">
              <el-table-column :label="$t('table.id')" align="center" type="index" width="50px"></el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.discript')" type="expand">
                <template v-slot="scope">
                  <el-form class="demo-table-expand" inline label-position="left">
                    <el-form-item :label="$t('pdgenlFund.fundEnName')">
                      <span>{{ scope.row.fundEnName }}</span>
                    </el-form-item>
                    <el-form-item :label="$t('pdgenlFund.fundCompName')">
                      <span>{{ scope.row.fundCompName }}</span>
                    </el-form-item>
                    <el-form-item :label="$t('pdgenlFund.fundCurrency')">
                      <span>{{ scope.row.fundCurrency | filter_currency }}</span>
                    </el-form-item>
                    <el-form-item :label="$t('pdgenlFund.fundState')">
                      <span>{{ scope.row.fundState | filter_fundState }}</span>
                    </el-form-item>
                    <el-form-item :label="$t('pdgenlFund.fundStateValiDate')">
                      <span>{{ scope.row.fundStateValiDate }}</span>
                    </el-form-item>
                    <el-form-item>
                      <el-button size="small" type="text" @click="showRelatedAccount(scope.row.id)">
                        {{ $t('pdtempPdAcc.cloum12') }}>>
                      </el-button>
                    </el-form-item>
                  </el-form>
                </template>
              </el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.foundname')" align="center"
                               prop="fundChName"></el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.fundType')" align="center" prop="fundType">
                <template v-slot="scope">{{ scope.row.fundType | filter_fundType }}</template>
              </el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.fundRiskGrade')" align="center"
                               prop="fundRiskGrade"></el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.cloum17')" align="center">
                <template v-slot="scope">
                  <el-input-number v-model="scope.row.fundInvestRatio" v-unit :max="100" :min="0"
                                   :placeholder="$t('pdtempPdAcc.placeholderNum')"
                                   :precision="2"
                                   :step="5" controls-position="right"></el-input-number>
                </template>
              </el-table-column>
              <el-table-column :label="$t('table.actions')" align="center" width="120">
                <template v-slot="scope">
                  <el-button size="mini" type="danger" @click="deleteFund(scope.row)">-</el-button>
                </template>
              </el-table-column>
            </el-table>
          </div>
        </div>
        <el-form>
          <!--保存按钮-->
          <el-form-item style="text-align: right;margin-top:10px">
            <el-button v-if="selectedAccount.id && selectedAccount.fundList.length=== 0"
                       v-auth="'pdtemp-pd-acc:fund:addAll'" dialog-disable="disable"
                       icon="el-icon-success"
                       size="small"
                       type="primary" @click="handleSaveFund">{{ $t('table.save') }}
            </el-button>
            <el-button v-if="selectedAccount.id && selectedAccount.fundList.length!== 0"
                       v-auth="'pdgenl-account:update'" dialog-disable="disable"
                       icon="el-icon-success"
                       size="small" type="primary" @click="handleSaveFund">
              {{ $t('pdgenlAccount.account_update') }}
            </el-button>
            <el-button v-if="selectedAccount.id" dialog-disable="disable"
                       icon="el-icon-refresh el-icon--left"
                       size="small" type="primary"
                       @click="initFund()">
              {{ $t('pdgenlAccount.account_refresh') }}
            </el-button>
          </el-form-item>
        </el-form>
      </el-tab-pane>
      <!--产品账户费用定义-->
      <el-tab-pane :disabled="disabled_tab" :label="$t('pdgenlAccount.accFeeMenu')" name="account_fee">
        <account-info :account="selectedAccount"></account-info>
        <div style="margin: 0 25px 0 25px">
          <cus-table-title :label="$t('pdtempPdAcc.AccountCost')"></cus-table-title>

          <el-table ref="accFeeTable" :data="accFeeTableList" border element-loading-text="Loading"
                    highlight-current-row size="mini" @row-click="rowClickaccFee">
            <el-table-column :label="$t('pdtempPdAcc.choose')" align="center" width="50">
              <template slot-scope="scope">
                <el-radio-group v-model="accFee" @change="selectedaccFeeTableChanged">
                  <el-radio :label="scope.row">{{ '' }}</el-radio>
                </el-radio-group>
              </template>
            </el-table-column>
            <el-table-column :label="$t('table.id')" align="center" type="index" width="50px"></el-table-column>
            <el-table-column :label="$t('pdtempPdAcc.pdAccFeeOrder')" align="center" prop="pdAccFeeOrder"
                             width="80px"></el-table-column>
            <el-table-column :label="$t('pdtempPdAcc.pdAccFeeCode')" align="center"
                             prop="pdAccFeeCode"></el-table-column>
            <el-table-column :label="$t('pdtempPdAcc.pdAccFeeName')" align="center"
                             prop="pdAccFeeName"></el-table-column>
            <el-table-column :label="$t('pdtempPdAcc.pdAccItemType')" align="center" prop="pdAccItemType">
              <template v-slot="scope">
                {{ scope.row.pdAccItemType | filter_pdAccItemType }}
              </template>
            </el-table-column>
            <el-table-column :label="$t('pdtempPdAcc.pdAccFeeDeduFreq')" align="center" prop="pdAccFeeDeduFreq">
              <template v-slot="scope">
                {{ scope.row.pdAccFeeDeduFreq | filter_settlementfrequency }}
              </template>
            </el-table-column>
            <el-table-column :label="$t('pdtempPdAcc.pdAccFeeCalcMode')" align="center" prop="pdAccFeeCalcMode">
              <template v-slot="scope">
                {{ scope.row.pdAccFeeCalcMode | filter_costcalway }}
              </template>
            </el-table-column>
            <el-table-column :label="$t('table.actions')" align="center" width="100">
              <template slot-scope="scope">
                <cus-del-btn v-auth="'delete:handleDeleteAccFee'" @ok="handleDeleteAccFee(scope.row)"></cus-del-btn>
              </template>
            </el-table-column>
          </el-table>
        </div>
        <cus-form-title :label="$t('pdtempPdAcc.DefinitionOfAccountCharges')"></cus-form-title>
        <el-form ref="form_account_fee" :model="form_account_fee" :rules="form_account_fee_rules" label-width="130px">
          <el-row :gutter="10">
            <el-col :span="7">
              <el-form-item :label="$t('pdtempPdAcc.pdAccFeeOrder')" prop="pdAccFeeOrder">
                <el-input v-model.number="form_account_fee.pdAccFeeOrder" :min="1"
                          :placeholder="$t('pdtempPdAcc.pdAccFeeOrder')"
                          clearable
                          type="number"></el-input>
              </el-form-item>
            </el-col>
            <el-col :span="7">
              <el-form-item :label="$t('pdtempPdAcc.pdAccItemType')" prop="pdAccItemType">
                <cus-select v-model="form_account_fee.pdAccItemType" :codetype="'costprotype'"
                            :placeholder="$t('pdtempPdAcc.pdAccItemType')"
                            @change="setPdAccFeeName">
                </cus-select>
              </el-form-item>
            </el-col>

            <el-col :span="7">
              <el-form-item :label="$t('pdtempPdAcc.pdAccFeeType')" prop="pdAccFeeType">
                <cus-select v-model="form_account_fee.pdAccFeeType" :codetype="'costattr'"
                            :placeholder="$t('pdtempPdAcc.pdAccFeeType')"></cus-select>
              </el-form-item>
            </el-col>

          </el-row>
          <el-row :gutter="10">
            <el-col :span="14">
              <el-form-item :label="$t('pdtempPdAcc.pdAccFeeName')" prop="pdAccFeeName">
                <el-input v-model="form_account_fee.pdAccFeeName" :placeholder="$t('pdtempPdAcc.pdAccFeeName')"
                          clearable></el-input>
              </el-form-item>
            </el-col>
          </el-row>

          <el-row :gutter="10">

            <el-col :span="7">
              <el-form-item :label="$t('pdtempPdAcc.pdAccFeeDeduType')" prop="pdAccFeeDeduType">
                <cus-select v-model="form_account_fee.pdAccFeeDeduType" :codetype="'costexptype'"
                            :placeholder="$t('pdtempPdAcc.pdAccFeeDeduType')"></cus-select>
              </el-form-item>
            </el-col>


            <el-col :span="7">
              <el-form-item :label="$t('pdtempPdAcc.pdAccFeeDeduFreq')" prop="pdAccFeeDeduFreq">
                <cus-select v-model="form_account_fee.pdAccFeeDeduFreq" :codetype="'settlementfrequency'"
                            :placeholder="$t('pdtempPdAcc.pdAccFeeDeduFreq')"></cus-select>
              </el-form-item>
            </el-col>


            <el-col :span="7">
              <el-form-item :label="$t('pdtempPdAcc.pdAccFeeCalcType')" prop="pdAccFeeCalcType">
                <cus-select v-model="form_account_fee.pdAccFeeCalcType" :codetype="'costcaltype'"
                            :placeholder="$t('pdtempPdAcc.pdAccFeeCalcType')"></cus-select>
              </el-form-item>
            </el-col>
          </el-row>
          <el-row :gutter="10">


            <el-col :span="7">
              <el-form-item :label="$t('pdtempPdAcc.pdAccFeeCalcMode')" prop="pdAccFeeCalcMode">
                <cus-select v-model="form_account_fee.pdAccFeeCalcMode" :codetype="'costcalway'"
                            :placeholder="$t('pdtempPdAcc.pdAccFeeCalcMode')"
                            @change="setFinalValOrFinalRatio"></cus-select>
              </el-form-item>
            </el-col>
            <el-col
              :span="7">
              <el-form-item :label="$t('pdtempPdAcc.pdAccFeeFinalVal')" prop="pdAccFeeFinalVal">
                <el-input v-model="form_account_fee.pdAccFeeFinalVal" :disabled="finalValFlag"
                          :placeholder="$t('pdtempPdAcc.pdAccFeeFinalVal')"
                          clearable></el-input>
              </el-form-item>
            </el-col>
            <el-col
              :span="7">
              <el-form-item :label="$t('pdtempPdAcc.pdAccFeeFinalRatio')" prop="pdAccFeeFinalRatio">
                <el-input v-model.number="form_account_fee.pdAccFeeFinalRatio" :disabled="finalRatioFlag" :max="100"
                          :min="0"
                          :placeholder="$t('pdtempPdAcc.pdAccFeeFinalRatio')"
                          clearable
                          type="number">
                  <template slot="suffix">%</template>
                </el-input>
              </el-form-item>
            </el-col>
          </el-row>

          <el-row :gutter="10">
            <el-col :span="7">
              <el-form-item :label="$t('pdtempPdAcc.pdAccFeeZeroFlag')" prop="pdAccFeeZeroFlag">
                <el-switch v-model="form_account_fee.pdAccFeeZeroFlag"
                           active-value="Y" inactive-value="N">
                </el-switch>
              </el-form-item>
            </el-col>
            <el-col v-show="form_account_fee.pdAccFeeCode===-1" :span="7">
              <el-form-item :label="$t('pdtempPdAcc.pdAccFeeCode')">
                <cus-select v-model="form_account_fee.pdAccFeeCode" :codetype="'costcaltype'"
                            :placeholder="$t('pdtempPdAcc.pdAccFeeCode')"></cus-select>
              </el-form-item>
            </el-col>
          </el-row>

          <el-form-item style="text-align: right">
            <el-button v-auth="'insert:addPdAccountFee'" :style="{ display: accFeeAdd}" dialog-disable="disable"
                       icon="el-icon-success"
                       size="small"
                       type="primary" @click="addPdAccountFee">{{ $t('pdgenlAccount.account_save') }}
            </el-button>
            <el-button v-auth="'update:updatePdAccountFee'" :style="{ display: accFeeUpdate}" dialog-disable="disable"
                       icon="el-icon-success"
                       size="small"
                       type="primary" @click="updatePdAccountFee">{{ $t('pdgenlAccount.account_update') }}
            </el-button>
            <el-button :style="{ display: accFeeResetForm}" dialog-disable="disable"
                       icon="el-icon-refresh el-icon--left"
                       size="small"
                       type="primary" @click="accFeeresetForm">{{ $t('pdgenlAccount.account_refresh') }}
            </el-button>
          </el-form-item>
        </el-form>
        <cus-form-title :label="$t('pdtempPdAcc.accFeeFormula')"></cus-form-title>
        <el-form label-width="130px">
          <el-row :gutter="10">
            <el-col :span="8">
              <el-form-item :label="$t('pdtempPdAcc.pdFeeBillCode')">
                <el-tag type="info">{{ form_account_fee.pdAccFeeCode }}</el-tag>
              </el-form-item>
            </el-col>
            <el-col :span="8">
              <el-form-item :label="$t('pdtempPdAcc.accFeeFormula')">
                <el-input v-model="form_account_fee.pdAccFeeCalcCode"
                          :disabled="pdAccFeeCalcCodeFlag"
                          readonly>
                  <svg-icon slot="suffix" :style="{cursor: !pdAccFeeCalcCodeFlag ? 'pointer':'not-allowed'}"
                            icon-class="calc"
                            style="color: #606266;font-size: 18px"
                            @click="!pdAccFeeCalcCodeFlag && toFormulaDef(accFee, '33')"/>
                </el-input>
              </el-form-item>
            </el-col>
          </el-row>
        </el-form>
      </el-tab-pane>
      <!--产品账户资金流入-->
      <el-tab-pane :disabled="disabled_tab" :label="$t('pdtempPdAcc.pdaccfouninflowdedine')" name="inFlow">
        <!-- 产品账户信息 -->
        <account-info :account="selectedAccount"></account-info>
        <!--该标签下公共部分表格-->
        <div style="margin: 0 25px 0 25px">
          <cus-table-title :label="$t('pdtempPdAcc.pdCapIn')"></cus-table-title>
          <div v-if="form_combination.pdaccfouninflowdedine" style="margin: 0 21px 0 1px">
            <el-table :data="inFlowList" border element-loading-text="Loading" highlight-current-row size="mini"
                      style=" margin: 0 0 0 0" @row-click="rowClickInFlow">
              <el-table-column :label="$t('pdtempPdAcc.choose')" align="center" width="50">
                <template slot-scope="scope">
                  <el-radio-group v-model="selectedInFlow" @change="selectedInFlowChanged">
                    <span><el-radio :label="scope.row">{{ '' }}</el-radio></span>
                    <span v-if="selectedInFlow.id && scope.row.id && selectedInFlow.id === scope.row.id"></span>
                  </el-radio-group>
                </template>
              </el-table-column>
              <el-table-column :label="$t('table.id')" align="center" type="index" width="50px"></el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.foundinflowtype')" align="center" prop="pdAccCapItemType"
                               sortable>
                <template slot-scope="scope">{{ scope.row.pdAccCapItemType | filter_pdAccCapInfType }}</template>
              </el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.inflowcode')" align="center"
                               prop="pdAccCapItemCode"></el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.inflowname')" align="center"
                               prop="pdAccCapItemName"></el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.pdAccCapInOutMode')" align="center" prop="pdAccCapInOutMode">
                <template slot-scope="scope">{{ scope.row.pdAccCapInOutMode | filter_pdAccInfMode }}</template>
              </el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.feecount')" align="center" prop="feeCount">
                <template slot-scope="scope">
                  {{ scope.row.feeCount !== undefined ? scope.row.feeCount : 0 }}
                </template>
              </el-table-column>
              <el-table-column :label="$t('table.actions')" align="center" width="100">
                <template slot-scope="scope">
                  <cus-del-btn v-auth="'pdtemp-pd-acc:inFlow:delete'"
                               @ok="handleDeleteInFlow(scope.row,'I')"></cus-del-btn>
                </template>
              </el-table-column>
            </el-table>
          </div>
        </div>
        <!--资金流入方式的单选按钮-->

        <div style="margin: 0 25px 0 25px">
          <el-form style="width: 98%">
            <el-form-item>
              <el-form-item :label="$t('pdtempPdAcc.foundinflowtype')">
                <el-radio-group v-model="inFlowType" @change="inFlowTypeChanged">
                  <el-radio :disabled="Object.keys(selectedInFlow).length > 0 && inFlowType !== 'P'" label="P">
                    {{ $t('pdtempPdAcc.paymentitems') }}
                  </el-radio>
                  <el-radio :disabled="Object.keys(selectedInFlow).length > 0 && inFlowType !== 'I'" label="I">
                    {{ $t('pdtempPdAcc.returnsA') }}
                  </el-radio>
                  <el-radio :disabled="Object.keys(selectedInFlow).length > 0 && inFlowType !== 'S'" label="S">
                    {{ $t('pdtempPdAcc.survivalGuaranteeItem') }}
                  </el-radio>
                  <el-radio :disabled="Object.keys(selectedInFlow).length > 0 && inFlowType !== 'C'" label="C">
                    {{ $t('pdtempPdAcc.indemnityInsurance') }}
                  </el-radio>
                </el-radio-group>
              </el-form-item>
            </el-form-item>
          </el-form>
        </div>
        <!--缴费项-->
        <div v-show="inFlowType==='P'">
          <cus-form-title :label="$t('pdtempPdAcc.DefinitionOfInflowContribution')"></cus-form-title>
          <el-form ref="form_inFlow" :model="form_inFlow" :rules="rules_formInflow" label-width="120px">
            <el-row :gutter="10">
              <el-col :span="7">
                <el-form-item :label="$t('pdtempPdAcc.paymentitems')">
                  <el-select v-model="selectedPremiumCode" :disabled="!!selectedInFlow.id" clearable filterable
                             @change="selectedPremiumCodeChanged">
                    <el-option
                      v-for="premium in premiumOptionList"
                      :key="premium.id"
                      :label="premium.pdPremCode+':'+premium.pdPayName"
                      :value="premium.pdPremCode">
                    </el-option>
                  </el-select>
                </el-form-item>
              </el-col>
              <cus-btn-wrapper>
                <el-button size="small" type="text" @click="toPremiumPage">>></el-button>
              </cus-btn-wrapper>
              <el-col :span="7">
                <el-form-item :label="$t('pdtempPdAcc.pdPremType')">
                  <cus-select v-model="form_inFlow.pdPremType" :codetype="'pdPremType'"></cus-select>
                </el-form-item>
              </el-col>
              <el-col :span="7">
                <el-form-item :label="$t('pdtempPdAcc.pdAddAmountType')">
                  <cus-radio v-model="form_inFlow.pdAddAmountType" :codetype="'pdAddAmountType'"></cus-radio>
                </el-form-item>
              </el-col>
            </el-row>
            <el-row :gutter="10">
              <el-col :span="7">
                <el-form-item :label="$t('pdtempPdAcc.pdAccCapInOutMode')" prop="">
                  <cus-select v-model="form_inFlow.pdAccCapInOutMode" :codetype="'pdAccInfMode'"></cus-select>
                </el-form-item>
              </el-col>
              <el-col :span="7" style="margin-left: 21px">
                <el-form-item :label="$t('pdtempPdAcc.pdAccCapInOutMode1')">
                  <cus-radio v-model="form_inFlow.pdAccCapInOutMode1" :changeMethod="setCapRatioAndCalcCode_P"
                             :codetype="'pdclearingmethod'"></cus-radio>
                </el-form-item>
              </el-col>

            </el-row>
            <el-row :gutter="10">
              <el-col v-if="form_inFlow.pdAccCapInOutMode1 === '1'" :span="7">
                <el-form-item :label="$t('pdtempPdAcc.pdAccCapInOutRatio')" prop="">
                  <el-input-number v-model.number="form_inFlow.pdAccCapInOutRatio" v-unit :max="100"
                                   :min="0" :placeholder="$t('pdtempPdAcc.placeholderNum')"
                                   :precision="2"
                                   :step="5" controls-position="right"></el-input-number>
                </el-form-item>
              </el-col>

              <el-col v-if="form_inFlow.pdAccCapInOutMode1 === '1'" :span="7" style="margin-left: 21px">
                <el-form-item :label="$t('pdtempPdAcc.pdAccInfMaxRatio')" prop="">
                  <el-input-number v-model="form_inFlow.pdAccInfMaxRatio" v-unit :max="100" :min="0"
                                   :placeholder="$t('pdtempPdAcc.placeholderNum')"
                                   :precision="2"
                                   :step="5" controls-position="right"></el-input-number>
                </el-form-item>
              </el-col>
              <el-col v-if="form_inFlow.pdAccCapInOutMode1 === '1'" :span="7">
                <el-form-item :label="$t('pdtempPdAcc.pdAccInfMinRatio')" prop="">
                  <el-input-number v-model="form_inFlow.pdAccInfMinRatio" v-unit :max="100" :min="0"
                                   :placeholder="$t('pdtempPdAcc.placeholderNum')"
                                   :precision="2" :step="5"
                                   controls-position="right"></el-input-number>
                </el-form-item>
              </el-col>
            </el-row>

            <el-form>
              <el-form-item style="float: right">
                <el-button v-if="!selectedInFlow.id" v-auth="'pdtemp-pd-acc:inFlow:addAll'" dialog-disable="disable"
                           icon="el-icon-success"
                           size="small"
                           type="primary" @click="handleSaveInFlow_P">{{ $t('table.save') }}
                </el-button>
                <el-button v-if="!!selectedInFlow.id" v-auth="'pdtemp-pd-acc:inFlow:addAll'" dialog-disable="disable"
                           icon="el-icon-success"
                           size="small"
                           type="primary" @click="handleUpdateInFlow_P">{{ $t('table.update') }}
                </el-button>
                <el-button dialog-disable="disable" icon="el-icon-refresh" size="small" type="primary"
                           @click="selectedInFlowChanged()">
                  {{ $t('tagsView.refresh') }}
                </el-button>
              </el-form-item>
            </el-form>

            <div v-if="form_inFlow.pdAccCapInOutMode1 === '2'">
              <cus-form-title :label="$t('pdtempPdAcc.premiumCreditAccountFormulaDef')"></cus-form-title>
              <el-row :gutter="10" style="margin-top: 10px">
                <cus-col>
                  <el-form-item :label="$t('pdtempPdAcc.inflowcode')">
                    <el-tag type="info">{{ selectedInFlow.pdAccCapItemCode }}</el-tag>
                  </el-form-item>
                </cus-col>
                <cus-col>
                  <el-form-item :label="$t('pdtempPdAcc.pdAccCapCalcCode')">
                    <el-input v-model="form_inFlow.pdAccCapCalcCode" readonly>
                      <svg-icon slot="suffix" icon-class="calc" style="color: #606266;font-size: 18px;cursor: pointer"
                                @click="toFormulaDef(selectedInFlow, '34')"/>
                    </el-input>
                  </el-form-item>
                </cus-col>
              </el-row>
            </div>
            <!--按钮-->

          </el-form>
        </div>
        <!--收益项-->
        <div v-show="inFlowType==='I'">
          <cus-form-title :label="$t('pdtempPdAcc.DefinitionOfInflowIncomeTerm')"></cus-form-title>
          <div v-if="form_combination.pdaccfoundInguarantee">
            <el-form ref="form_inFlow" :model="form_inFlow_I" :rules="rules_formInflow_I" label-width="120px">
              <el-row :gutter="10">
                <cus-col>
                  <el-form-item :label="$t('pdtempPdAcc.returnsA')">
                    <el-select v-model="pdAccCapInfCode" :disabled="!!selectedInFlow.id" clearable filterable
                               @change="bringInv">
                      <el-option
                        v-for="item in invOptionList"
                        :key="item.id"
                        :label="item.pdInvCode+':'+item.pdInvName"
                        :value="item.pdInvCode">
                      </el-option>
                    </el-select>
                  </el-form-item>
                </cus-col>
                <cus-btn-wrapper>
                  <el-button size="small" type="text" @click="toInvPage">>></el-button>
                </cus-btn-wrapper>
                <cus-col>
                  <el-form-item :label="$t('pdtempPdAcc.incomeguaranteeType')" prop="accountName">
                    <cus-select v-model="form_inFlow_I.pdPremType" :codetype="'pdinvtype'" disabled></cus-select>
                  </el-form-item>
                </cus-col>
              </el-row>
              <el-row :gutter="10">
                <cus-col>
                  <el-form-item :label="$t('pdtempPdAcc.pdAccCapInOutMode')" prop="">
                    <cus-select v-model="form_inFlow_I.pdAccCapInOutMode" :codetype="'pdAccInfMode'"></cus-select>
                  </el-form-item>
                </cus-col>
                <cus-col style="margin-left: 21px">
                  <el-form-item :label="$t('pdtempPdAcc.pdAccCapInOutMode1')">
                    <cus-radio v-model="form_inFlow_I.pdAccCapInOutMode1" :changeMethod="setCapRatioAndCalcCode_I"
                               :codetype="'pdclearingmethod'"></cus-radio>
                  </el-form-item>
                </cus-col>
              </el-row>
              <el-row :gutter="10">
                <cus-col v-if="form_inFlow_I.pdAccCapInOutMode1 === '1'">
                  <el-form-item :label="$t('pdtempPdAcc.pdAccCapInOutRatio')" prop="">
                    <el-input-number v-model="form_inFlow_I.pdAccCapInOutRatio" v-unit :max="100" :min="0"
                                     :placeholder="$t('pdtempPdAcc.placeholderNum')"
                                     :precision="2"
                                     :step="5" controls-position="right"></el-input-number>
                  </el-form-item>
                </cus-col>
                <cus-col v-if="form_inFlow_I.pdAccCapInOutMode1 === '1'" style="margin-left: 21px">
                  <el-form-item :label="$t('pdtempPdAcc.pdAccInfMaxRatio')" prop="">
                    <el-input-number v-model="form_inFlow_I.pdAccInfMaxRatio" v-unit :max="100" :min="0"
                                     :placeholder="$t('pdtempPdAcc.placeholderNum')"
                                     :precision="2"
                                     :step="5" controls-position="right"></el-input-number>
                  </el-form-item>
                </cus-col>

                <cus-col v-if="form_inFlow_I.pdAccCapInOutMode1 === '1'">
                  <el-form-item :label="$t('pdtempPdAcc.pdAccInfMinRatio')" prop="">
                    <el-input-number v-model="form_inFlow_I.pdAccInfMinRatio" v-unit :max="100" :min="0"
                                     :placeholder="$t('pdtempPdAcc.placeholderNum')"
                                     :precision="2" :step="5"
                                     controls-position="right"></el-input-number>
                  </el-form-item>
                </cus-col>
              </el-row>

              <!--按钮-->
              <el-form label-width="160px" style="width:98%;margin: 20px 0 0 0">
                <el-form-item align="right">
                  <!--保存按钮-->
                  <el-button v-if="!selectedInFlow.id" v-auth="'pdtemp-pd-acc:inFlow:addAll'" dialog-disable="disable"
                             icon="el-icon-success"
                             size="small"
                             type="primary" @click="handleSaveInFlow_I">{{ $t('table.save') }}
                  </el-button>
                  <el-button v-if="!!selectedInFlow.id" v-auth="'pdtemp-pd-acc:inFlow:addAll'"
                             dialog-disable="disable"
                             icon="el-icon-success"
                             size="small"
                             type="primary" @click="handleUpdateInFlow_I">
                    {{ $t('table.update') }}
                  </el-button>
                  <el-button dialog-disable="disable" icon="el-icon-refresh" size="small" type="primary"
                             @click="selectedInFlowChanged()">
                    {{ $t('tagsView.refresh') }}
                  </el-button>
                </el-form-item>
              </el-form>

              <div v-if="form_inFlow_I.pdAccCapInOutMode1 === '2'">
                <cus-form-title :label="$t('pdtempPdAcc.premiumCreditAccountFormulaDef')"></cus-form-title>
                <el-row style="margin-top: 10px">
                  <cus-col>
                    <el-form-item :label="$t('pdtempPdAcc.inflowcode')">
                      <el-tag type="info">{{ selectedInFlow.pdAccCapItemCode }}</el-tag>
                    </el-form-item>
                  </cus-col>
                  <cus-col style="margin-left: 21px">
                    <el-form-item :label="$t('pdtempPdAcc.pdAccCapCalcCode')">
                      <el-input v-model="form_inFlow_I.pdAccCapCalcCode" readonly>
                        <svg-icon slot="suffix" icon-class="calc"
                                  style="color: #606266;font-size: 18px;cursor: pointer"
                                  @click="toFormulaDef(selectedInFlow, '34')"/>
                      </el-input>
                    </el-form-item>
                  </cus-col>
                </el-row>
              </div>
            </el-form>
          </div>
        </div>
        <!--生存保障-->
        <div v-show="inFlowType==='S'">
          <cus-form-title :label="$t('pdtempPdAcc.FlowIntoTheDefinitionOfSubsistenceSecurity')"></cus-form-title>
          <div v-if="form_combination.pdaccfoundInguarantee">
            <el-form ref="form_inFlow" :model="form_inFlow_S" :rules="rules_formInflow_I" label-width="120px">
              <el-row :gutter="10">
                <cus-col>
                  <el-form-item :label="$t('pdtempPdAcc.inflowcode')">
                    <el-tag type="info">{{ selectedInFlow.pdAccCapItemCode }}</el-tag>
                  </el-form-item>
                </cus-col>
                <cus-col style="margin-left: 21px">
                  <el-form-item :label="$t('pdtempPdAcc.survivalGuaranteeItem')">
                    <el-select v-model="pdAccCapInfCode" :disabled="!!selectedInFlow.id" clearable filterable
                               @change="bringSrvl">
                      <el-option
                        v-for="item in srvlBnftOptionList"
                        :key="item.id"
                        :label="item.pdBnftCode+':'+item.pdBnftName"
                        :value="item.pdBnftCode">
                      </el-option>
                    </el-select>
                  </el-form-item>
                </cus-col>
                <cus-btn-wrapper>
                  <el-button size="small" type="text" @click="toBnftPage('srvl', 'in')">>></el-button>
                </cus-btn-wrapper>

                <cus-col>
                  <el-form-item :label="$t('pdtempPdAcc.survivalGuaranteeType')" prop="pdPremType">
                    <cus-select v-model="form_inFlow_S.pdPremType" :codetype="'pdsbnftnjxl'" disabled></cus-select>
                  </el-form-item>
                </cus-col>
              </el-row>
              <el-row :gutter="10">
                <el-col :span="7">
                  <el-form-item :label="$t('pdtempPdAcc.pdAccCapInOutMode')" prop="">
                    <cus-select v-model="form_inFlow_S.pdAccCapInOutMode" :changeMethod="setCapRatioAndCalcCode_S"
                                :codetype="'pdAccInfMode'"></cus-select>
                  </el-form-item>
                </el-col>
                <el-col :span="7" style="margin-left: 21px">
                  <el-form-item :label="$t('pdtempPdAcc.pdAccCapInOutMode1')">
                    <cus-radio v-model="form_inFlow_S.pdAccCapInOutMode1"
                               :codetype="'pdclearingmethod'"></cus-radio>
                  </el-form-item>
                </el-col>
              </el-row>
              <el-row :gutter="10">

                <cus-col v-if="form_inFlow_S.pdAccCapInOutMode1 === '1'">
                  <el-form-item :label="$t('pdtempPdAcc.pdAccCapInOutRatio')" prop="">
                    <el-input-number v-model="form_inFlow_S.pdAccCapInOutRatio" v-unit :max="100" :min="0"
                                     :placeholder="$t('pdtempPdAcc.placeholderNum')" :precision="2"
                                     :step="5" controls-position="right"></el-input-number>
                  </el-form-item>
                </cus-col>
                <cus-col v-if="form_inFlow_S.pdAccCapInOutMode1 === '1'" style="margin-left: 21px">
                  <el-form-item :label="$t('pdtempPdAcc.pdAccInfMaxRatio')" prop="">
                    <el-input-number v-model="form_inFlow_S.pdAccInfMaxRatio" v-unit :max="100" :min="0"
                                     :placeholder="$t('pdtempPdAcc.placeholderNum')" :precision="2"
                                     :step="5" controls-position="right"></el-input-number>
                  </el-form-item>
                </cus-col>

                <cus-col v-if="form_inFlow_S.pdAccCapInOutMode1 === '1'">
                  <el-form-item :label="$t('pdtempPdAcc.pdAccInfMinRatio')" prop="">
                    <el-input-number v-model="form_inFlow_S.pdAccInfMinRatio" v-unit :max="100" :min="0"
                                     :placeholder="$t('pdtempPdAcc.placeholderNum')" :precision="2"
                                     :step="5"
                                     controls-position="right"></el-input-number>
                  </el-form-item>
                </cus-col>
              </el-row>

              <el-form label-width="160px" style="width:98%;margin: 20px 0 0 0">
                <!--保存按钮-->
                <el-form-item style="float: right">
                  <el-button v-if="!selectedInFlow.id" v-auth="'pdtemp-pd-acc:inFlow:addAll'" dialog-disable="disable"
                             icon="el-icon-success"
                             size="small"
                             type="primary" @click="handleSaveInFlow_S">
                    {{ $t('table.save') }}
                  </el-button>
                  <el-button v-if="!!selectedInFlow.id" v-auth="'pdtemp-pd-acc:inFlow:addAll'"
                             dialog-disable="disable"
                             icon="el-icon-success"
                             size="small"
                             type="primary" @click="handleUpdateInFlow_S">
                    {{ $t('table.update') }}
                  </el-button>
                  <el-button dialog-disable="disable" icon="el-icon-refresh" size="small" type="primary"
                             @click="selectedInFlowChanged()">
                    {{ $t('tagsView.refresh') }}
                  </el-button>
                </el-form-item>
              </el-form>

              <div v-if="form_inFlow_S.pdAccCapInOutMode1 === '2'">
                <cus-form-title :label="$t('pdtempPdAcc.premiumCreditAccountFormulaDef')"></cus-form-title>
                <el-row style="margin-top: 10px">
                  <cus-col>
                    <el-form-item :label="$t('pdtempPdAcc.inflowcode')">
                      <el-tag type="info">{{ selectedInFlow.pdAccCapItemCode }}</el-tag>
                    </el-form-item>
                  </cus-col>

                  <cus-col style="margin-left: 21px">
                    <el-form-item :label="$t('pdtempPdAcc.pdAccCapCalcCode')">
                      <el-input v-model="form_inFlow_S.pdAccCapCalcCode" readonly>
                        <svg-icon slot="suffix" icon-class="calc"
                                  style="color: #606266;font-size: 18px;cursor: pointer"
                                  @click="toFormulaDef(selectedInFlow, '34')"/>
                      </el-input>
                    </el-form-item>
                  </cus-col>
                </el-row>
              </div>
            </el-form>

          </div>
        </div>
        <!--赔付保障-->
        <div v-show="inFlowType==='C'">
          <cus-form-title :label="$t('pdtempPdAcc.DefinitionOfInflowClaimsProtection')"></cus-form-title>
          <div v-if="form_combination.pdaccfoundInguarantee">
            <el-form ref="form_inFlow" :model="form_inFlow_C" :rules="rules_formInflow_I" label-width="120px">
              <el-row :gutter="10">
                <cus-col>
                  <el-form-item :label="$t('pdtempPdAcc.indemnityInsurance')">
                    <el-select v-model="pdAccCapInfCode" :disabled="!!selectedInFlow.id" clearable filterable
                               @change="bringClm">
                      <el-option
                        v-for="item in clmBnftOptionList"
                        :key="item.id"
                        :label="item.pdBnftCode+':'+item.pdBnftName"
                        :value="item.pdBnftCode">
                      </el-option>
                    </el-select>
                  </el-form-item>
                </cus-col>
                <cus-btn-wrapper>
                  <el-button size="small" type="text" @click="toBnftPage('clm', 'in')">>></el-button>
                </cus-btn-wrapper>
                <cus-col>
                  <el-form-item :label="$t('pdtempPdAcc.indemnityInsuranceType')" prop="pdPremType">
                    <cus-select v-model="form_inFlow_C.pdPremType" :codetype="'pdclmbnfttype2'" disabled></cus-select>
                  </el-form-item>
                </cus-col>
              </el-row>
              <el-row :gutter="10">
                <cus-col>
                  <el-form-item :label="$t('pdtempPdAcc.pdAccCapInOutMode')" prop="pdAccCapInOutMode">
                    <cus-select v-model="form_inFlow_C.pdAccCapInOutMode" :codetype="'pdAccInfMode'"></cus-select>
                  </el-form-item>
                </cus-col>
                <cus-col style="margin-left: 21px">
                  <el-form-item :label="$t('pdtempPdAcc.pdAccCapInOutMode1')">
                    <cus-radio v-model="form_inFlow_C.pdAccCapInOutMode1" :changeMethod="setCapRatioAndCalcCode_C"
                               :codetype="'pdclearingmethod'"></cus-radio>
                  </el-form-item>
                </cus-col>
              </el-row>
              <el-row :gutter="10">
                <cus-col v-if="form_inFlow_C.pdAccCapInOutMode1 === '1'">
                  <el-form-item :label="$t('pdtempPdAcc.pdAccCapInOutRatio')" prop="">
                    <el-input-number v-model="form_inFlow_C.pdAccCapInOutRatio" v-unit :max="100" :min="0"
                                     :placeholder="$t('pdtempPdAcc.placeholderNum')"
                                     :precision="2"
                                     :step="5" controls-position="right"></el-input-number>
                  </el-form-item>
                </cus-col>
                <cus-col v-if="form_inFlow_C.pdAccCapInOutMode1 === '1'" style="margin-left: 21px">
                  <el-form-item :label="$t('pdtempPdAcc.pdAccInfMaxRatio')" prop="">
                    <el-input-number v-model="form_inFlow_C.pdAccInfMaxRatio" v-unit :max="100" :min="0"
                                     :placeholder="$t('pdtempPdAcc.placeholderNum')"
                                     :precision="2"
                                     :step="5" controls-position="right"></el-input-number>
                  </el-form-item>
                </cus-col>
                <cus-col v-if="form_inFlow_C.pdAccCapInOutMode1 === '1'">
                  <el-form-item :label="$t('pdtempPdAcc.pdAccInfMinRatio')" prop="">
                    <el-input-number v-model="form_inFlow_C.pdAccInfMinRatio" v-unit :max="100" :min="0"
                                     :placeholder="$t('pdtempPdAcc.placeholderNum')"
                                     :precision="2" :step="5"
                                     controls-position="right"></el-input-number>
                  </el-form-item>
                </cus-col>
              </el-row>
              <el-form label-width="160px" style="width:98%;margin: 20px 0 0 0">
                <el-form-item align="right">
                  <!--保存按钮-->
                  <el-button v-if="!selectedInFlow.id" v-auth="'pdtemp-pd-acc:inFlow:addAll'" dialog-disable="disable"
                             icon="el-icon-success"
                             size="small"
                             type="primary" @click="handleSaveInFlow_C">{{ $t('table.save') }}
                  </el-button>
                  <el-button v-if="!!selectedInFlow.id" v-auth="'pdtemp-pd-acc:inFlow:addAll'"
                             dialog-disable="disable"
                             icon="el-icon-success"
                             size="small"
                             type="primary" @click="handleUpdateInFlow_C">
                    {{ $t('table.update') }}
                  </el-button>
                  <el-button dialog-disable="disable" icon="el-icon-refresh" size="small" type="primary"
                             @click="selectedInFlowChanged()">
                    {{ $t('tagsView.refresh') }}
                  </el-button>
                </el-form-item>
              </el-form>
              <div v-if="form_inFlow_C.pdAccCapInOutMode1 === '2'">
                <cus-form-title :label="$t('pdtempPdAcc.premiumCreditAccountFormulaDef')"></cus-form-title>
                <el-row style="margin-top: 10px">
                  <cus-col>
                    <el-form-item :label="$t('pdtempPdAcc.inflowcode')">
                      <el-tag type="info">{{ selectedInFlow.pdAccCapItemCode }}</el-tag>
                    </el-form-item>
                  </cus-col>

                  <cus-col style="margin-left: 21px">
                    <el-form-item :label="$t('pdtempPdAcc.pdAccCapCalcCode')">
                      <el-input v-model="form_inFlow_C.pdAccCapCalcCode" readonly>
                        <svg-icon slot="suffix" icon-class="calc"
                                  style="color: #606266;font-size: 18px;cursor: pointer"
                                  @click="toFormulaDef(selectedInFlow, '34')"/>
                      </el-input>
                    </el-form-item>
                  </cus-col>
                </el-row>
              </div>
            </el-form>
            <!--按钮-->

          </div>
        </div>
        <br/>


        <!-- 费用 -->
        <div v-if="!!selectedInFlow.id">
          <cus-form-title :label="$t('pdtempPdAcc.inFlowFeeDef')"/>
          <div v-if="form_combination.pdaccfouninflowdedine" style="margin: 0 25px 0 25px">
            <cus-table-title :label="$t('pdtempPdAcc.pdtemppdaccInFee')"></cus-table-title>
            <el-table :data="pdAccountFeeCapInList" border element-loading-text="Loading"
                      highlight-current-row size="mini" style=" margin: 0 0 0 0"
                      @row-click="rowClickselectedPdAccountFee">
              <el-table-column :label="$t('pdtempPdAcc.choose')" align="center" width="50">
                <template slot-scope="scope">
                  <el-radio-group v-model="selectedPdAccountFee" @change="selectedPdAccountFeeChange">
                    <span><el-radio :label="scope.row">{{ '' }}</el-radio></span>
                  </el-radio-group>
                </template>
              </el-table-column>
              <el-table-column :label="$t('table.id')" align="center" type="index" width="50"></el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.AccountCostCode')" align="center"
                               prop="pdAccFeeCode"></el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.AccountCostName')" align="center"
                               prop="pdAccFeeName"></el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.pdAccFeeDeduOrder')" align="center"
                               prop="pdAccFeeDeduOrder"></el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.feedeductiontime')" align="center"
                               prop="pdAccFeeDeduTime">
                <template v-slot="scope">
                  {{ scope.row.pdAccFeeDeduTime | filter_pdAccFeeDeduTime }}
                </template>
              </el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.pdAccCapFeeFinalVal')" align="center"
                               prop="pdAccFeeFinalVal"></el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.pdAccCapFeeFinalRatio')" align="center"
                               prop="pdAccFeeFinalRatio">
                <template v-slot="scope">
                  {{ scope.row.pdAccFeeFinalRatio | filter_Ratio }}
                </template>
              </el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.pdAccFeeCalcCode')" align="center"
                               prop="pdCalcCode"></el-table-column>

              <el-table-column :label="$t('table.actions')" align="center" fixed="right">
                <template v-slot="scope">
                  <cus-del-btn @ok="deleteAccFee(scope.row, 'I')"></cus-del-btn>
                </template>
              </el-table-column>
            </el-table>
          </div>
          <br>
          <!-- 资金流入项费用定义form -->
          <el-form ref="form_pdAccCapIn_Fee" :model="form_pdAccCapIn_Fee" :rules="form_pdAccCapIn_Fee_rules"
                   label-width="120px">
            <el-row :gutter="10">
              <cus-col>
                <el-form-item :label="$t('pdtempPdAcc.pdAccCapInf')" prop="pdAccFeeCalcMode">
                  <el-input v-model="selectedInFlow.pdAccCapItemCode" disabled readonly></el-input>
                </el-form-item>
              </cus-col>

              <cus-col>
                <el-form-item :label="$t('pdtempPdAcc.pdAccCapFee')" prop="pdAccFeeId">
                  <el-select v-model="form_pdAccCapIn_Fee.pdAccFeeId" clearable filterable
                             @change="selectAccountItem">
                    <el-option
                      v-for="item in accFeeOptionList"
                      :key="item.id"
                      :label="item.pdAccFeeCode+':'+item.pdAccFeeName"
                      :value="item.id">
                    </el-option>
                  </el-select>
                </el-form-item>
              </cus-col>

              <cus-col>
                <el-form-item :label="$t('pdtempPdAcc.pdAccFeeCalcMode')" prop="pdAccFeeCalcMode">
                  <cus-select v-model="form_pdAccCapIn_Fee.pdAccFeeCalcMode" :codetype="'costcalway'" :disabled="true"
                              :placeholder="$t('pdtempPdAcc.pdAccFeeCalcMode')"></cus-select>
                </el-form-item>
              </cus-col>
            </el-row>
            <el-row :gutter="10">
              <cus-col>
                <el-form-item :label="$t('pdtempPdAcc.pdAccFeeDeduOrder')" prop="pdAccFeeDeduOrder">
                  <el-input v-model="form_pdAccCapIn_Fee.pdAccFeeDeduOrder"></el-input>
                </el-form-item>
              </cus-col>
              <cus-col>
                <el-form-item :label="$t('pdtempPdAcc.pdAccFeeDeduTime')" prop="pdAccFeeDeduTime">
                  <cus-select v-model="form_pdAccCapIn_Fee.pdAccFeeDeduTime"
                              :codetype="'pdAccFeeDeduTime'"></cus-select>
                </el-form-item>
              </cus-col>
              <cus-col>
                <el-form-item :label="$t('pdtempPdAcc.pdAccFirstFeeDeduDay')"
                              prop="pdAccFirstFeeDeduDay">
                  <cus-select v-model="form_pdAccCapIn_Fee.pdAccFirstFeeDeduDay"
                              :codetype="'pdAccFirstFeeDeduDay'"></cus-select>
                </el-form-item>
              </cus-col>
            </el-row>
            <el-row v-if="capFeeFinalValFlag" :gutter="10">
              <cus-col>
                <el-form-item :label="$t('pdtempPdAcc.pdAccCapFeeFinalVal')" prop="pdAccFeeFinalVal">
                  <el-input-number v-model="form_pdAccCapIn_Fee.pdAccFeeFinalVal" :min="0"
                                   :placeholder="$t('pdtempPdAcc.pdAccCapFeeFinalVal')" :precision="2"
                                   :step="1" controls-position="right"></el-input-number>
                </el-form-item>
              </cus-col>
              <cus-col>
                <el-form-item :label="$t('pdtempPdAcc.pdAccFeeFinalMaxVal')"
                              prop="pdAccFeeFinalMaxVal">
                  <el-input-number v-model="form_pdAccCapIn_Fee.pdAccFeeFinalMaxVal" :min="0"
                                   :placeholder="$t('pdtempPdAcc.pdAccFeeFinalMaxVal')"
                                   :precision="2"
                                   :step="1" controls-position="right"></el-input-number>
                </el-form-item>
              </cus-col>
            </el-row>
            <el-row v-if="capFeeFinalRatioFlag" :gutter="10">
              <cus-col>
                <el-form-item :label="$t('pdtempPdAcc.pdAccCapFeeFinalRatio')"
                              prop="pdAccFeeFinalRatio">
                  <el-input-number v-model="form_pdAccCapIn_Fee.pdAccFeeFinalRatio" v-unit :max="100"
                                   :min="0" :placeholder="$t('pdtempPdAcc.pdAccCapFeeFinalRatio')"
                                   :precision="2"
                                   :step="5" controls-position="right"></el-input-number>
                </el-form-item>
              </cus-col>
              <cus-col>
                <el-form-item :label="$t('pdtempPdAcc.pdAccFeeMaxFinalRatio')"
                              prop="pdAccFeeMaxFinalRatio">
                  <el-input-number v-model="form_pdAccCapIn_Fee.pdAccFeeMaxFinalRatio" v-unit :max="100" :min="0"
                                   :placeholder="$t('pdtempPdAcc.pdAccFeeMaxFinalRatio')"
                                   :precision="2"
                                   :step="5"
                                   controls-position="right"></el-input-number>
                </el-form-item>
              </cus-col>
            </el-row>
            <el-row v-if="capFeeCalcCodeFlag" :gutter="10">
              <cus-col>
                <el-form-item :label="$t('pdtempPdAcc.pdAccFeeCalcCode')" prop="pdCalcCode">
                  <el-input v-model="form_pdAccCapIn_Fee.pdCalcCode" readonly>
                    <svg-icon slot="suffix" icon-class="calc" style="color: #606266;font-size: 18px;cursor: pointer"
                              @click="toFormulaDef(selectedPdAccountFee, '66')"/>
                  </el-input>
                </el-form-item>
              </cus-col>
            </el-row>
          </el-form>
          <el-form label-width="160px" style="width:98%;margin: 20px 0 0 0">
            <el-form-item align="right">
              <!--按钮-->
              <el-button v-if="!selectedPdAccountFee.id" v-auth="'pdtemp-pd-acc:inFlow:addAll'"
                         dialog-disable="disable"
                         icon="el-icon-success"
                         size="small"
                         type="primary" @click="handleSavePdAccCapIn_Fee('I')">{{ $t('table.save') }}
              </el-button>
              <el-button v-if="selectedPdAccountFee.id" v-auth="'pdtemp-pd-acc:inFlow:addAll'"
                         dialog-disable="disable"
                         icon="el-icon-success"
                         size="small"
                         type="primary" @click="handleUpdatePdAccCapIn_Fee('I')">{{
                  $t('table.update')
                }}
              </el-button>
              <el-button dialog-disable="disable" icon="el-icon-refresh" size="small" type="primary"
                         @click="refreshPdAccCapFee">{{
                  $t('tagsView.refresh')
                }}
              </el-button>
            </el-form-item>
          </el-form>
        </div>
      </el-tab-pane>
      <!--产品账户资金流出-->
      <el-tab-pane :disabled="disabled_tab" :label="$t('pdtempPdAcc.pdaccfounoutdedine')" name="outFlow">
        <!-- 产品账户信息 -->
        <account-info :account="selectedAccount"></account-info>
        <!--该标签下公共部分表格-->
        <div style="margin: 0 25px 0 25px">
          <cus-table-title :label="$t('pdtempPdAcc.pdCapOut')"></cus-table-title>
          <div v-if="form_combination.pdaccfouninflowdedine" style="margin: 0 21px 0 1px">
            <el-table :data="outFlowList" border element-loading-text="Loading" highlight-current-row size="mini"
                      style=" margin: 0 0 0 0" @row-click="rowClickselectedOutFlow">
              <el-table-column :label="$t('pdtempPdAcc.choose')" align="center" width="50">
                <template slot-scope="scope">
                  <el-radio-group v-model="selectedOutFlow" @change="selectedOutFlowChanged">
                    <span><el-radio :label="scope.row">{{ '' }}</el-radio></span>
                  </el-radio-group>
                </template>
              </el-table-column>
              <el-table-column :label="$t('table.id')" align="center" type="index" width="50px"></el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.pdAccCapOutmethod')" align="center" prop="pdAccCapItemType"
                               sortable>
                <template slot-scope="scope">{{ scope.row.pdAccCapItemType | filter_pdAccCapInfType }}</template>
              </el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.outflowcode')" align="center"
                               prop="pdAccCapItemCode"></el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.outflowname')" align="center"
                               prop="pdAccCapItemName"></el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.pdAccCapOutMode')" align="center" prop="pdAccCapInOutMode">
                <template slot-scope="scope">{{ scope.row.pdAccCapInOutMode | filter_pdAccInfMode }}</template>
              </el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.feecount')" align="center" prop="feeCount">
                <template slot-scope="scope">
                  {{ scope.row.feeCount !== undefined ? scope.row.feeCount : 0 }}
                </template>
              </el-table-column>
              <el-table-column :label="$t('table.actions')" align="center" width="100">
                <template slot-scope="scope">
                  <cus-del-btn v-auth="'pdtemp-pd-acc:inFlow:delete'"
                               @ok="handleDeleteInFlow(scope.row,'O')"></cus-del-btn>
                </template>
              </el-table-column>
            </el-table>
          </div>
        </div>
        <!--资金流出方式的单选按钮-->
        <div style="margin: 0 25px 0 25px">
          <el-form style="width: 98%">
            <el-form-item>
              <el-form-item :label="$t('pdtempPdAcc.pdAccCapOutmethod')">
                <el-radio-group v-model="outFlowType" @change="outFlowTypeChanged">
                  <el-radio :disabled="Object.keys(selectedOutFlow).length > 0 && outFlowType !== 'S'" label="S">
                    {{ $t('pdtempPdAcc.survivalGuaranteeItem') }}
                  </el-radio>
                  <el-radio :disabled="Object.keys(selectedOutFlow).length > 0 && outFlowType !== 'C'" label="C">
                    {{ $t('pdtempPdAcc.indemnityInsurance') }}
                  </el-radio>
                  <el-radio :disabled="Object.keys(selectedOutFlow).length > 0 && outFlowType !== 'PA'" label="PA">
                    {{ $t('pdtempPdAcc.policySpecificItems') }}
                  </el-radio>
                </el-radio-group>
              </el-form-item>
            </el-form-item>
          </el-form>
        </div>
        <!--生存保障-->
        <div v-show="outFlowType==='S'">
          <cus-form-title :label="$t('pdtempPdAcc.FlowOuttoTheDefinitionOfSubsistenceSecurity')"></cus-form-title>
          <div v-if="form_combination.pdaccfoundInguarantee">
            <el-form ref="form_inFlow" :model="form_outFlow_S" :rules="rules_formOutflow_S" label-width="120px">
              <el-row :gutter="10">
                <cus-col>
                  <el-form-item :label="$t('pdtempPdAcc.survivalGuaranteeItem')">
                    <el-select v-model="pdAccCapOutfCode" :disabled="!!selectedOutFlow.id" clearable filterable
                               @change="bringSrvlBnft">
                      <el-option
                        v-for="item in srvlBnftOptionList"
                        :key="item.id"
                        :label="item.pdBnftCode+':'+item.pdBnftName"
                        :value="item.pdBnftCode">
                      </el-option>
                    </el-select>
                  </el-form-item>
                </cus-col>
                <cus-btn-wrapper>
                  <el-button size="small" type="text" @click="toBnftPage('srvl','out')">>></el-button>
                </cus-btn-wrapper>
                <cus-col>
                  <el-form-item :label="$t('pdtempPdAcc.survivalGuaranteeType')" prop="accountName">
                    <cus-select v-model="form_outFlow_S.pdPremType" :codetype="'pdsbnftnjxl'" disabled></cus-select>
                  </el-form-item>
                </cus-col>
              </el-row>
              <el-row :gutter="10">
                <cus-col>
                  <el-form-item :label="$t('pdtempPdAcc.pdAccCapOutMode')" prop="">
                    <cus-select v-model="form_outFlow_S.pdAccCapInOutMode" :codetype="'pdAccInfMode'"></cus-select>
                  </el-form-item>
                </cus-col>
                <cus-col style="margin-left: 21px">
                  <el-form-item :label="$t('pdtempPdAcc.pdAccCapOutMode1')">
                    <cus-radio v-model="form_outFlow_S.pdAccCapInOutMode1"
                               :changeMethod="setCapRatioAndCalcCode_Out_S"
                               :codetype="'pdclearingmethod'"></cus-radio>
                  </el-form-item>
                </cus-col>
              </el-row>

              <el-row :gutter="10">
                <cus-col v-if="form_outFlow_S.pdAccCapInOutMode1 === '1'">
                  <el-form-item :label="$t('pdtempPdAcc.pdAccCapOutRatio')" prop="">
                    <el-input-number v-model="form_outFlow_S.pdAccCapInOutRatio" v-unit :max="100" :min="0"
                                     :placeholder="$t('pdtempPdAcc.placeholderNum')"
                                     :precision="2"
                                     :step="5" controls-position="right"></el-input-number>
                  </el-form-item>
                </cus-col>

                <cus-col v-if="form_outFlow_S.pdAccCapInOutMode1 === '1'" style="margin-left: 21px">
                  <el-form-item :label="$t('pdtempPdAcc.pdAccOutfMaxRatio')" prop="">
                    <el-input-number v-model="form_outFlow_S.pdAccInfMaxRatio" v-unit :max="100" :min="0"
                                     :placeholder="$t('pdtempPdAcc.placeholderNum')"
                                     :precision="2"
                                     :step="5" controls-position="right"></el-input-number>
                  </el-form-item>
                </cus-col>

                <cus-col v-if="form_outFlow_S.pdAccCapInOutMode1 === '1'">
                  <el-form-item :label="$t('pdtempPdAcc.pdAccOutfMinRatio')" prop="">
                    <el-input-number v-model="form_outFlow_S.pdAccInfMinRatio" v-unit :max="100" :min="0"
                                     :placeholder="$t('pdtempPdAcc.placeholderNum')"
                                     :precision="2"
                                     :step="5" controls-position="right"></el-input-number>
                  </el-form-item>
                </cus-col>
              </el-row>

              <el-form label-width="160px" style="width:98%;margin: 20px 0 0 0">
                <!--保存按钮-->
                <el-form-item style="float: right">
                  <el-button v-if="!selectedOutFlow.id" v-auth="'pdtemp-pd-acc:inFlow:addAll'"
                             dialog-disable="disable"
                             icon="el-icon-success"
                             size="small"
                             type="primary" @click="handleSaveOutFlow_S">
                    {{ $t('table.save') }}
                  </el-button>
                  <el-button v-if="!!selectedOutFlow.id" v-auth="'pdtemp-pd-acc:inFlow:addAll'"
                             dialog-disable="disable"
                             icon="el-icon-success"
                             size="small"
                             type="primary" @click="handleUpdateOutFlow_S">
                    {{ $t('table.update') }}
                  </el-button>
                  <el-button dialog-disable="disable" icon="el-icon-refresh" size="small" type="primary"
                             @click="selectedOutFlowChanged()">
                    {{ $t('tagsView.refresh') }}
                  </el-button>
                </el-form-item>
              </el-form>


              <div v-if="form_outFlow_S.pdAccCapInOutMode1 === '2'">
                <cus-form-title :label="$t('pdtempPdAcc.premiumCreditAccountFormulaDef')"></cus-form-title>
                <el-row :gutter="10" style="margin-top: 10px">
                  <cus-col>
                    <el-form-item :label="$t('pdtempPdAcc.outflowcode')">
                      <el-tag type="info">{{ selectedOutFlow.pdAccCapItemCode }}</el-tag>
                    </el-form-item>
                  </cus-col>
                  <cus-col style="margin-left: 21px">
                    <el-form-item :label="$t('pdtempPdAcc.pdAccCapCalcCode')">
                      <el-input v-model="form_outFlow_S.pdAccCapCalcCode" readonly>
                        <svg-icon slot="suffix" icon-class="calc"
                                  style="color: #606266;font-size: 18px;cursor: pointer"
                                  @click="toFormulaDef(selectedOutFlow, '35')"/>
                      </el-input>
                    </el-form-item>
                  </cus-col>
                </el-row>
              </div>
            </el-form>
          </div>
        </div>
        <!--赔付保障-->
        <div v-show="outFlowType==='C'">
          <cus-form-title :label="$t('pdtempPdAcc.DefinitionOfOutflowClaimsProtection')"></cus-form-title>
          <div v-if="form_combination.pdaccfoundInguarantee">
            <el-form ref="form_inFlow" :model="form_outFlow_C" :rules="rules_formOutflow_C" label-width="120px">
              <el-row :gutter="10">
                <cus-col>
                  <el-form-item :label="$t('pdtempPdAcc.indemnityInsurance')">
                    <el-select v-model="pdAccCapOutfCode" :disabled="!!selectedOutFlow.id" clearable filterable
                               @change="bringClmBnft">
                      <el-option
                        v-for="item in clmBnftOptionList"
                        :key="item.id"
                        :label="item.pdBnftCode+':'+item.pdBnftName"
                        :value="item.pdBnftCode">
                      </el-option>
                    </el-select>
                  </el-form-item>
                </cus-col>
                <cus-btn-wrapper>
                  <el-button size="small" type="text" @click="toBnftPage('clm', 'out')">>></el-button>
                </cus-btn-wrapper>
                <cus-col>
                  <el-form-item :label="$t('pdtempPdAcc.claimType')" prop="accountName">
                    <cus-select v-model="form_outFlow_C.pdPremType" :codetype="'pdclmbnfttype2'"
                                disabled></cus-select>
                  </el-form-item>
                </cus-col>
              </el-row>
              <el-row :gutter="10">

                <cus-col>
                  <el-form-item :label="$t('pdtempPdAcc.pdAccCapOutMode')" prop="">
                    <cus-select v-model="form_outFlow_C.pdAccCapInOutMode" :codetype="'pdAccInfMode'"></cus-select>
                  </el-form-item>
                </cus-col>

                <cus-col style="margin-left: 21px">
                  <el-form-item :label="$t('pdtempPdAcc.pdAccCapOutMode1')">
                    <cus-radio v-model="form_outFlow_C.pdAccCapInOutMode1"
                               :changeMethod="setCapRatioAndCalcCode_Out_C"
                               :codetype="'pdclearingmethod'"></cus-radio>
                  </el-form-item>
                </cus-col>
              </el-row>
              <el-row :gutter="10">
                <cus-col v-if="form_outFlow_C.pdAccCapInOutMode1 === '1'">
                  <el-form-item :label="$t('pdtempPdAcc.pdAccCapOutRatio')" prop="">
                    <el-input-number v-model="form_outFlow_C.pdAccCapInOutRatio" v-unit :max="100" :min="0"
                                     :placeholder="$t('pdtempPdAcc.placeholderNum')" :precision="2"
                                     :step="5" controls-position="right"></el-input-number>
                  </el-form-item>
                </cus-col>

                <cus-col v-if="form_outFlow_C.pdAccCapInOutMode1 === '1'" style="margin-left: 21px">
                  <el-form-item :label="$t('pdtempPdAcc.pdAccOutfMaxRatio')" prop="">
                    <el-input-number v-model="form_outFlow_C.pdAccInfMaxRatio" v-unit :max="100" :min="0"
                                     :placeholder="$t('pdtempPdAcc.placeholderNum')"
                                     :precision="2"
                                     :step="5" controls-position="right"></el-input-number>
                  </el-form-item>
                </cus-col>

                <cus-col v-if="form_outFlow_C.pdAccCapInOutMode1 === '1'">
                  <el-form-item :label="$t('pdtempPdAcc.pdAccOutfMinRatio')" prop="">
                    <el-input-number v-model="form_outFlow_C.pdAccInfMinRatio" v-unit :max="100" :min="0"
                                     :placeholder="$t('pdtempPdAcc.placeholderNum')"
                                     :precision="2"
                                     :step="5" controls-position="right"></el-input-number>
                  </el-form-item>
                </cus-col>
              </el-row>


              <!--按钮-->
              <el-form label-width="160px" style="width:98%;margin: 20px 0 0 0">
                <el-form-item align="right">
                  <!--保存按钮-->
                  <el-button v-if="!selectedOutFlow.id" v-auth="'pdtemp-pd-acc:inFlow:addAll'"
                             dialog-disable="disable"
                             icon="el-icon-success"
                             size="small"
                             type="primary" @click="handleSaveOutFlow_C">{{ $t('table.save') }}
                  </el-button>
                  <el-button v-if="!!selectedOutFlow.id" v-auth="'pdtemp-pd-acc:inFlow:addAll'"
                             dialog-disable="disable"
                             icon="el-icon-success"
                             size="small"
                             type="primary" @click="handleUpdateOutFlow_C">
                    {{ $t('table.update') }}
                  </el-button>
                  <el-button dialog-disable="disable" icon="el-icon-refresh" size="small" type="primary"
                             @click="selectedOutFlowChanged()">
                    {{ $t('tagsView.refresh') }}
                  </el-button>
                </el-form-item>
              </el-form>


              <div v-if="form_outFlow_C.pdAccCapInOutMode1 === '2'">
                <cus-form-title :label="$t('pdtempPdAcc.premiumCreditAccountFormulaDef')"></cus-form-title>
                <el-row :gutter="10" style="margin-top: 10px">
                  <cus-col>
                    <el-form-item :label="$t('pdtempPdAcc.outflowcode')">
                      <el-tag type="info">{{ selectedOutFlow.pdAccCapItemCode }}</el-tag>
                    </el-form-item>
                  </cus-col>
                  <cus-col style="margin-left: 21px">
                    <el-form-item :label="$t('pdtempPdAcc.pdAccCapCalcCode')">
                      <el-input v-model="form_outFlow_C.pdAccCapCalcCode" readonly>
                        <svg-icon slot="suffix" icon-class="calc"
                                  style="color: #606266;font-size: 18px;cursor: pointer"
                                  @click="toFormulaDef(selectedOutFlow, '35')"/>
                      </el-input>
                    </el-form-item>
                  </cus-col>
                </el-row>
              </div>
            </el-form>

          </div>
        </div>
        <!--保全项-->
        <div v-show="outFlowType==='PA'">
          <cus-form-title :label="$t('pdtempPdAcc.paOutDef')"></cus-form-title>
          <div v-if="form_combination.pdaccfoundInguarantee">
            <el-form ref="form_inFlow" :model="form_outFlow_PA" :rules="rules_formOutflow_C" label-width="120px">
              <el-row :gutter="10">
                <cus-col>
                  <el-form-item :label="$t('pdtempPdAcc.policySpecificItems')">
                    <el-select v-model="pdAccCapOutfCode" :disabled="!!selectedOutFlow.id" clearable filterable
                               @change="bringPdPa">
                      <el-option
                        v-for="item in pdPaOptionList"
                        :key="item.id"
                        :label="item.paCode+':'+item.paName"
                        :value="item.paCode">
                      </el-option>
                    </el-select>
                  </el-form-item>
                </cus-col>
                <cus-col>
                  <el-form-item :label="$t('pdtempPdAcc.pdAccCapOutMode')" prop="">
                    <cus-select v-model="form_outFlow_PA.pdAccCapInOutMode" :codetype="'pdAccInfMode'"></cus-select>
                  </el-form-item>
                </cus-col>
              </el-row>
              <el-row :gutter="10">
                <cus-col>
                  <el-form-item :label="$t('pdtempPdAcc.pdAccCapOutRatio')" prop="">
                    <el-input-number v-model="form_outFlow_PA.pdAccCapInOutRatio" v-unit :max="100" :min="0"
                                     :placeholder="$t('pdtempPdAcc.placeholderNum')"
                                     :precision="2"
                                     :step="5" controls-position="right"></el-input-number>
                  </el-form-item>
                </cus-col>

                <cus-col>
                  <el-form-item :label="$t('pdtempPdAcc.pdAccOutfMaxRatio')" prop="">
                    <el-input-number v-model="form_outFlow_PA.pdAccInfMaxRatio" v-unit :max="100" :min="0"
                                     :placeholder="$t('pdtempPdAcc.placeholderNum')"
                                     :precision="2"
                                     :step="5" controls-position="right"></el-input-number>
                  </el-form-item>
                </cus-col>

                <cus-col>
                  <el-form-item :label="$t('pdtempPdAcc.pdAccOutfMinRatio')" prop="">
                    <el-input-number v-model="form_outFlow_PA.pdAccInfMinRatio" v-unit :max="100" :min="0"
                                     :placeholder="$t('pdtempPdAcc.placeholderNum')"
                                     :precision="2"
                                     :step="5" controls-position="right"></el-input-number>
                  </el-form-item>
                </cus-col>
              </el-row>

            </el-form>
            <!--按钮-->
            <el-form label-width="160px" style="width:98%;margin: 20px 0 0 0">
              <el-form-item style="text-align: right">
                <!--保存按钮-->
                <el-button v-if="!selectedOutFlow.id" v-auth="'pdtemp-pd-acc:inFlow:addAll'" dialog-disable="disable"
                           icon="el-icon-success"
                           size="small"
                           type="primary" @click="handleSaveOutFlow_PA">{{ $t('table.save') }}
                </el-button>
                <el-button v-if="!!selectedOutFlow.id" v-auth="'pdtemp-pd-acc:inFlow:addAll'" dialog-disable="disable"
                           icon="el-icon-success"
                           size="small"
                           type="primary" @click="handleUpdateOutFlow_PA">
                  {{ $t('table.update') }}
                </el-button>
                <el-button dialog-disable="disable" icon="el-icon-refresh" size="small" type="primary"
                           @click="selectedOutFlowChanged()">
                  {{ $t('tagsView.refresh') }}
                </el-button>
              </el-form-item>
            </el-form>
          </div>
        </div>
        <br/>
        <!-- 费用 -->
        <div v-if="!!selectedOutFlow.id">
          <cus-form-title :label="$t('pdtempPdAcc.outFlowFeeDef')"></cus-form-title>
          <div v-if="form_combination.pdaccfouninflowdedine" style="margin: 0 25px 0 25px">
            <cus-table-title :label="$t('pdtempPdAcc.pdtemppdaccInFee')"></cus-table-title>
            <el-table :data="pdAccountFeeCapOutList" border element-loading-text="Loading" highlight-current-row
                      size="mini" style=" margin: 0 0 0 0" @row-click="rowClickselectedPdAccountFee">
              <el-table-column :label="$t('pdtempPdAcc.choose')" align="center" width="50">
                <template slot-scope="scope">
                  <el-radio-group v-model="selectedPdAccountFee" @change="selectedPdAccountFeeChange">
                    <span><el-radio :label="scope.row">{{ '' }}</el-radio></span>
                  </el-radio-group>
                </template>
              </el-table-column>
              <el-table-column :label="$t('table.id')" type="index" width="50px"></el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.AccountCostCode')" align="center"
                               prop="pdAccFeeCode"></el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.AccountCostName')" align="center"
                               prop="pdAccFeeName"></el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.pdAccFeeOrder')" align="center"
                               prop="pdAccFeeDeduOrder"></el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.feedeductiontime')" align="center" prop="pdAccFeeDeduTime">
                <template v-slot="scope">
                  {{ scope.row.pdAccFeeDeduTime | filter_pdAccFeeDeduTime }}
                </template>
              </el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.pdAccCapFeeFinalVal')" align="center"
                               prop="pdAccFeeFinalVal"></el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.pdAccCapFeeFinalRatio')" align="center"
                               prop="pdAccFeeFinalRatio">
                <template v-slot="scope">
                  {{ scope.row.pdAccFeeFinalRatio | filter_Ratio }}
                </template>
              </el-table-column>
              <el-table-column :label="$t('pdtempPdAcc.pdAccFeeCalcCode')" align="center"
                               prop="pdCalcCode"></el-table-column>

              <el-table-column :label="$t('table.actions')" align="center" fixed="right">
                <template v-slot="scope">
                  <cus-del-btn @ok="deleteAccFee(scope.row, 'O')"></cus-del-btn>
                </template>
              </el-table-column>
            </el-table>
          </div>
          <br>
          <!-- 资金流出项费用定义form -->
          <el-form ref="form_pdAccCapIn_Fee" :model="form_pdAccCapIn_Fee" :rules="form_pdAccCapIn_Fee_rules"
                   label-width="130px">
            <el-row :gutter="10">

              <cus-col>
                <el-form-item :label="$t('pdtempPdAcc.pdAccCapInf')" prop="pdAccFeeCalcMode">
                  <el-input v-model="selectedOutFlow.pdAccCapItemCode" disabled readonly></el-input>
                </el-form-item>
              </cus-col>

              <cus-col>
                <el-form-item :label="$t('pdtempPdAcc.pdAccCapFee')" prop="pdAccFeeId">
                  <el-select v-model="form_pdAccCapIn_Fee.pdAccFeeId" clearable filterable
                             @change="selectAccountItem">
                    <el-option
                      v-for="item in accFeeOptionList"
                      :key="item.id"
                      :label="item.pdAccFeeCode+':'+item.pdAccFeeName"
                      :value="item.id">
                    </el-option>
                  </el-select>
                </el-form-item>
              </cus-col>

              <cus-col>
                <el-form-item :label="$t('pdtempPdAcc.pdAccFeeCalcMode')" prop="pdAccFeeCalcMode">
                  <cus-select v-model="form_pdAccCapIn_Fee.pdAccFeeCalcMode" :codetype="'costcalway'" :disabled="true"
                              :placeholder="$t('pdtempPdAcc.pdAccFeeCalcMode')"></cus-select>
                </el-form-item>
              </cus-col>
            </el-row>
            <el-row :gutter="10">
              <cus-col>
                <el-form-item :label="$t('pdtempPdAcc.pdAccFeeDeduOrder')" prop="pdAccFeeDeduOrder">
                  <el-input v-model="form_pdAccCapIn_Fee.pdAccFeeDeduOrder"></el-input>
                </el-form-item>
              </cus-col>
              <cus-col>
                <el-form-item :label="$t('pdtempPdAcc.pdAccFeeDeduTime')" prop="pdAccFeeDeduTime">
                  <cus-select v-model="form_pdAccCapIn_Fee.pdAccFeeDeduTime"
                              :codetype="'pdAccFeeDeduTime'"></cus-select>
                </el-form-item>
              </cus-col>
              <cus-col>
                <el-form-item :label="$t('pdtempPdAcc.pdAccFirstFeeDeduDay')"
                              prop="pdAccFirstFeeDeduDay">
                  <cus-select v-model="form_pdAccCapIn_Fee.pdAccFirstFeeDeduDay"
                              :codetype="'pdAccFirstFeeDeduDay'"></cus-select>
                </el-form-item>
              </cus-col>
            </el-row>
            <el-row v-if="capFeeFinalValFlag" :gutter="10">
              <cus-col>
                <el-form-item :label="$t('pdtempPdAcc.pdAccCapFeeFinalVal')" prop="pdAccFeeFinalVal">
                  <el-input-number v-model="form_pdAccCapIn_Fee.pdAccFeeFinalVal" :min="0"
                                   :placeholder="$t('pdtempPdAcc.pdAccCapFeeFinalVal')"
                                   :precision="2"
                                   :step="1" controls-position="right"></el-input-number>
                </el-form-item>
              </cus-col>
              <cus-col>
                <el-form-item :label="$t('pdtempPdAcc.pdAccFeeFinalMaxVal')"
                              prop="pdAccFeeFinalMaxVal">
                  <el-input-number v-model="form_pdAccCapIn_Fee.pdAccFeeFinalMaxVal" :min="0"
                                   :placeholder="$t('pdtempPdAcc.pdAccFeeFinalMaxVal')"
                                   :precision="2"
                                   :step="1" controls-position="right"></el-input-number>
                </el-form-item>
              </cus-col>
            </el-row>
            <el-row v-if="capFeeFinalRatioFlag" :gutter="10">
              <cus-col>
                <el-form-item :label="$t('pdtempPdAcc.pdAccCapFeeFinalRatio')" prop="pdAccFeeFinalRatio">
                  <el-input-number v-model="form_pdAccCapIn_Fee.pdAccFeeFinalRatio" v-unit :max="100" :min="0"
                                   :placeholder="$t('pdtempPdAcc.pdAccCapFeeFinalRatio')"
                                   :precision="2"
                                   :step="5" controls-position="right"></el-input-number>
                </el-form-item>
              </cus-col>
              <cus-col>
                <el-form-item :label="$t('pdtempPdAcc.pdAccFeeMaxFinalRatio')" prop="pdAccFeeMaxFinalRatio">
                  <el-input-number v-model="form_pdAccCapIn_Fee.pdAccFeeMaxFinalRatio" v-unit :max="100" :min="0"
                                   :placeholder="$t('pdtempPdAcc.pdAccFeeMaxFinalRatio')"
                                   :precision="2"
                                   :step="5"
                                   controls-position="right"></el-input-number>
                </el-form-item>
              </cus-col>
            </el-row>

            <el-row v-if="capFeeCalcCodeFlag" :gutter="10">
              <cus-col>
                <el-form-item :label="$t('pdtempPdAcc.pdAccFeeCalcCode')" prop="pdCalcCode">
                  <el-input v-model="form_pdAccCapIn_Fee.pdCalcCode" readonly>
                    <svg-icon slot="suffix" icon-class="calc" style="color: #606266;font-size: 18px;cursor: pointer"
                              @click="toFormulaDef(selectedPdAccountFee, '67')"/>
                  </el-input>
                </el-form-item>
              </cus-col>
            </el-row>
          </el-form>
          <el-form label-width="160px" style="width:98%;margin: 20px 0 0 0">
            <el-form-item style="text-align: right">
              <!--按钮-->
              <el-button v-if="!selectedPdAccountFee.id" v-auth="'pdtemp-pd-acc:inFlow:addAll'"
                         dialog-disable="disable"
                         icon="el-icon-success"
                         size="small"
                         type="primary" @click="handleSavePdAccCapIn_Fee('O')">{{ $t('table.save') }}
              </el-button>
              <el-button v-if="selectedPdAccountFee.id" v-auth="'pdtemp-pd-acc:inFlow:addAll'"
                         dialog-disable="disable"
                         icon="el-icon-success"
                         size="small"
                         type="primary" @click="handleUpdatePdAccCapIn_Fee('O')">{{
                  $t('table.update')
                }}
              </el-button>
              <el-button dialog-disable="disable" icon="el-icon-refresh" size="small" type="primary"
                         @click="refreshPdAccCapFee">{{
                  $t('tagsView.refresh')
                }}
              </el-button>
            </el-form-item>
          </el-form>
        </div>
      </el-tab-pane>
    </el-tabs>
  </div>

  <!-- 页面弹窗部分 -->

  <!-- 产品账户详情  账户基础  账户费用 账户流入流出项 -->
  <el-dialog v-if="dialogVisible.accFee" v-dialog-drag :visible.sync="dialogVisible.accFee"
             width="80%" @close="changeDialogVisible_accFee">


    <cus-page-title-back :isDialog="true" :label="$t('pdtempPdAcc.pdAccDetail')"
                         @backTo="changeDialogVisible_accFee"></cus-page-title-back>

    <!--账户基础信息 复用account-info出现问题 -->
    <el-form style="margin: 10px 0 0 25px">
      <el-row justify="center" type="flex">
        <el-col>
          <el-form-item :label="$t('pdtempPdAcc.pdacc')">
            <el-tag type="info">{{ quickAccountInfo.pdAccCode + ':' + quickAccountInfo.pdAccName }}</el-tag>
          </el-form-item>
        </el-col>
        <el-col>
          <el-form-item :label="$t('pdtempPdAcc.accounttype')">
            <el-tag type="info">{{ quickAccountInfo.pdAccountType | filter_accountType }}</el-tag>
          </el-form-item>
        </el-col>
      </el-row>
    </el-form>


    <!--账户费用-->
    <cus-table-title :label="$t('pdtempPdAcc.pdaccfee')"></cus-table-title>
    <el-table :data="quickDefAccountFeeList" border element-loading-text="Loading" highlight-current-row size="mini"
              style=" margin: 0 0 0 0">
      <el-table-column :label="$t('table.id')" align="center" type="index" width="50px"></el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.pdAccFeeCode')" align="center" prop="accFeeCode"></el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.pdAccFeeName')" align="center" prop="accFeeName"></el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.pdAccFeeOrder')" align="center" prop="accFeeOrder"></el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.feetype')" align="center" prop="accFeeType">
        <template v-slot="scope">
          {{ scope.row.accFeeType | filter_accFeeType }}
        </template>
      </el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.feeitemtype')" align="center" prop="accItemType">
        <template v-slot="scope">
          {{ scope.row.accItemType | filter_accItemType }}
        </template>
      </el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.feedeductiontype')" align="center" prop="accFeeDeduType">
        <template v-slot="scope">
          {{ scope.row.accFeeDeduType | filter_accFeeDeduType }}
        </template>
      </el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.pdAccFeeDeduFreq')" align="center" prop="accFeeDeduFreq">
        <template v-slot="scope">
          {{ scope.row.accFeeDeduFreq | filter_accFeeDeduFreq }}
        </template>
      </el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.pdAccFeeCalcMode')" align="center" prop="accFeeCalcMode">
        <template v-slot="scope">
          {{ scope.row.accFeeCalcMode | filter_accFeeCalcMode }}
        </template>
      </el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.pdAccFeeCalcType')" align="center" prop="accFeeCalcType">
        <template v-slot="scope">
          {{ scope.row.accFeeCalcType | filter_accFeeCalcType }}
        </template>
      </el-table-column>
    </el-table>


    <!--快捷定义账户流入项列表-->
    <cus-table-title :label="$t('pdtempPdAcc.pdCapIn')"></cus-table-title>
    <el-table :data="quickDefInFlowList" border element-loading-text="Loading" highlight-current-row size="mini"
              style=" margin: 0 0 0 0">
      <el-table-column :label="$t('table.id')" align="center" type="index" width="50px"></el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.discript')" type="expand">
        <template v-slot="scope">
          <el-form class="demo-table-expand" inline label-position="left">
            <el-form-item :label="$t('pdtempPdAcc.accFeeFormula')">
              <span>{{ scope.row.pdAccCapItemType | filter_pdAccCapInfType }}</span>
            </el-form-item>
            <el-form-item :label="$t('pdtempPdAcc.inflowcode')">
              <span>{{ scope.row.pdAccCapItemCode }}</span>
            </el-form-item>
            <el-form-item :label="$t('pdtempPdAcc.inflowname')">
              <span>{{ scope.row.pdAccCapItemName }}</span>
            </el-form-item>
            <el-form-item :label="$t('pdtempPdAcc.pdPremType')">
              <span>{{ scope.row.pdPremType | filter_pdPremType }}</span>
            </el-form-item>
            <el-form-item :label="$t('pdtempPdAcc.pdAddAmountType')">
              <span>{{ scope.row.pdAddAmountType | filter_pdAddAmountType }}</span>
            </el-form-item>
            <el-form-item :label="$t('pdtempPdAcc.pdAccCapInOutMode')">
              <span>{{ scope.row.pdAccCapInOutMode | filter_pdAccInfMode }}</span>
            </el-form-item>
            <el-form-item :label="$t('pdtempPdAcc.pdAccCapInOutRatio')">
              <span>{{ scope.row.pdAccCapInOutRatio }}</span>
            </el-form-item>
            <el-form-item :label="$t('pdtempPdAcc.pdAccInfMaxRatio')">
              <span>{{ scope.row.pdAccInfMaxRatio }}</span>
            </el-form-item>
            <el-form-item :label="$t('pdtempPdAcc.pdAccInfMinRatio')">
              <span>{{ scope.row.pdAccInfMinRatio }}</span>
            </el-form-item>
            <el-form-item :label="$t('pdtempPdAcc.pdAccCapCalcCode')">
              <span>{{ scope.row.pdAccCapCalcCode }}</span>
            </el-form-item>
          </el-form>
        </template>
      </el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.foundinflowtype')" align="center" prop="pdAccCapItemType" sortable>
        <template slot-scope="scope">{{ scope.row.pdAccCapItemType | filter_pdAccCapInfType }}</template>
      </el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.inflowcode')" align="center" prop="pdAccCapItemCode"></el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.inflowname')" align="center" prop="pdAccCapItemName"></el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.pdAccCapInOutMode')" align="center" prop="pdAccCapInOutMode">
        <template slot-scope="scope">{{ scope.row.pdAccCapInOutMode | filter_pdAccInfMode }}</template>
      </el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.feecount')" align="center" prop="feeCount">
        <template slot-scope="scope">
          {{ scope.row.feeCount !== undefined ? scope.row.feeCount : 0 }}
        </template>
      </el-table-column>
    </el-table>

    <!--快捷定义账户流出项列表-->
    <cus-table-title :label="$t('pdtempPdAcc.pdCapOut')"></cus-table-title>
    <el-table :data="quickDefOutFlowList" border element-loading-text="Loading" highlight-current-row size="mini"
              style=" margin: 0 0 0 0">
      <el-table-column :label="$t('table.id')" align="center" type="index" width="50px"></el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.discript')" type="expand">
        <template v-slot="scope">
          <el-form class="demo-table-expand" inline label-position="left">
            <el-form-item :label="$t('pdtempPdAcc.pdAccCapOutmethod')">
              <span>{{ scope.row.pdAccCapItemType | filter_pdAccCapInfType }}</span>
            </el-form-item>
            <el-form-item :label="$t('pdtempPdAcc.premiumCode')">
              <span>{{ scope.row.pdAccCapItemCode }}</span>
            </el-form-item>
            <el-form-item :label="$t('pdtempPdAcc.inflowname')">
              <span>{{ scope.row.pdAccCapItemName }}</span>
            </el-form-item>
            <el-form-item :label="$t('pdtempPdAcc.pdPremType')">
              <span>{{ scope.row.pdPremType | filter_pdPremType }}</span>
            </el-form-item>
            <el-form-item :label="$t('pdtempPdAcc.pdAddAmountType')">
              <span>{{ scope.row.pdAddAmountType | filter_pdAddAmountType }}</span>
            </el-form-item>
            <el-form-item :label="$t('pdtempPdAcc.pdAccCapOutMode')">
              <span>{{ scope.row.pdAccCapInOutMode | filter_pdAccInfMode }}</span>
            </el-form-item>
            <el-form-item :label="$t('pdtempPdAcc.pdAccCapOutRatio')">
              <span>{{ scope.row.pdAccCapInOutRatio }}</span>
            </el-form-item>
            <el-form-item :label="$t('pdtempPdAcc.pdAccOutfMaxRatio')">
              <span>{{ scope.row.pdAccInfMaxRatio }}</span>
            </el-form-item>
            <el-form-item :label="$t('pdtempPdAcc.pdAccOutfMinRatio')">
              <span>{{ scope.row.pdAccInfMinRatio }}</span>
            </el-form-item>
            <el-form-item :label="$t('pdtempPdAcc.pdAccCapCalcCode')">
              <span>{{ scope.row.pdAccCapCalcCode }}</span>
            </el-form-item>
          </el-form>
        </template>
      </el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.pdAccCapOutmethod')" align="center" prop="pdAccCapItemType" sortable>
        <template slot-scope="scope">{{ scope.row.pdAccCapItemType | filter_pdAccCapInfType }}</template>
      </el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.outflowcode')" align="center"
                       prop="pdAccCapItemCode"></el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.outflowname')" align="center"
                       prop="pdAccCapItemName"></el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.pdAccCapOutMode')" align="center" prop="pdAccCapInOutMode">
        <template slot-scope="scope">{{ scope.row.pdAccCapInOutMode | filter_pdAccInfMode }}</template>
      </el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.feecount')" align="center" prop="feeCount">
        <template slot-scope="scope">
          {{ scope.row.feeCount !== undefined ? scope.row.feeCount : 0 }}
        </template>
      </el-table-column>
    </el-table>


    <!--<el-button  size="small" @click="handleAccFeeMore" align="left" type="text">更多</el-button>-->
  </el-dialog>


  <!-- 关联账户 -->
  <el-dialog v-dialog-drag :visible.sync="dialogVisible.relatedAccount" center width="60%"
             @close="dialogVisible.relatedAccount = false">
    <cus-page-title-back :isDialog="true" :label="$t('pdtempPdAcc.foundDeAssociatedAccount')"
                         @backTo="dialogVisible.relatedAccount = false"/>
    <el-table ref="singleTable" :data="configs_account" border element-loading-text="Loading" highlight-current-row
              size="mini" style=" margin: 0 0 0 0">
      <el-table-column :label="$t('pdtempPdAcc.product1')" align="center">
        <template v-slot="scope">{{
            scope.row.account_01.accountCode + ':' + scope.row.account_01.accountName
          }}
        </template>
      </el-table-column>
      <el-table-column :label="$t('pdtempPdAcc.product2')" align="center">
        <template v-slot="scope">
            <span v-if="scope.row.account_02">
              {{ scope.row.account_02.accountCode + ':' + scope.row.account_02.accountName }}
            </span>
        </template>
      </el-table-column>
    </el-table>
  </el-dialog>

  <el-dialog v-if="dialogVisible.premium" v-dialog-drag :visible.sync="dialogVisible.premium" center title="缴费与加费"
             width="70%">
    <premium :premiumCode="selectedPremiumCode"></premium>
  </el-dialog>
  <!-- 收益页面 -->
  <el-dialog v-if="dialogVisible.inv" v-dialog-drag :visible.sync="dialogVisible.inv" center title="收益详情" width="70%">
    <inv :invCode="selectedInvCode"></inv>
  </el-dialog>
  <!-- 保障共用的父级页面 -->
  <el-dialog v-if="benefit" v-dialog-drag :visible.sync="benefit" center title="赔付保障详情"
             width="70%">
    <benefit :pdBnft="selectedBnft"></benefit>
  </el-dialog>
  <!-- 账户公式 -->
  <el-dialog v-if="dialogVisible.formulaDef_accountFee" v-dialog-drag :close-on-click-modal="false"
             :close-on-press-escape="false"
             :visible.sync="dialogVisible.formulaDef_accountFee" center width="80%">
    <accountFeeFormula :bussObject="selectedBussObject" :formulaType="formulaType" @bringInCalcCode="bringInCalcCode"
                       @changeDialogVisible_formula="changeDialogVisible_formula"></accountFeeFormula>
  </el-dialog>

  <!-- 弹窗（账户关联投资标的） -->
  <el-dialog v-if="associateFund"  :visible="associateFund" center width="70%">
    <pdgenlfund :pdgenlfund="pdgenlfundData"
                @changeDialogVisible_pdgenlfund="changeDialogVisible_pdgenlfund"></pdgenlfund>
  </el-dialog>

</cus-wraper>
"},null]}