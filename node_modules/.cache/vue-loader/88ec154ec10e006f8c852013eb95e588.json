{"remainingRequest":"D:\\86181\\Desktop\\product\\pcs-product-view\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\86181\\Desktop\\product\\pcs-product-view\\src\\views\\product-definition\\pd-operation-def\\pd-compensation-def\\main\\index.vue?vue&type=template&id=7cc36c65&scoped=true&","dependencies":[{"path":"D:\\86181\\Desktop\\product\\pcs-product-view\\src\\views\\product-definition\\pd-operation-def\\pd-compensation-def\\main\\index.vue","mtime":1609847106933},{"path":"D:\\86181\\Desktop\\product\\pcs-product-view\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1706753187435},{"path":"D:\\86181\\Desktop\\product\\pcs-product-view\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1706753192021},{"path":"D:\\86181\\Desktop\\product\\pcs-product-view\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1706753187435},{"path":"D:\\86181\\Desktop\\product\\pcs-product-view\\node_modules\\vue-loader\\lib\\index.js","mtime":1706753190941}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:
<cus-wraper>
  <cus-page-title-back :label="$t('route.pdCompensationDef')" @backTo="backToMenu"/>
  <operationbutton :procInsId="pdProcessId" :type="type"></operationbutton>

  <!-- 产品信息 -->
  <cus-product-info></cus-product-info>

  <!-- 所有的Tab页面 -->
  <div style="margin: 20px 30px 20px 25px">
    <el-tabs v-model="activatedTabName" type="border-card">
      <div :class="{ 'showDiv': showPageFlag === '1' }"></div>
      <!-- 限额定义 -->
      <el-tab-pane :label="$t('pdClaimVerificationRules1.quotaDefinition')" name="quotaDefinition">
        <!-- 限额定义表格 -->
        <cus-table-title :label="$t('pdClaimVerificationRules1.pdQuotaItem')"></cus-table-title>
        <el-table ref="singleTable" :data="pdQuotaItemList" border element-loading-text="Loading"
                  highlight-current-row size="mini" style="width: 99%" @row-click="rowClick">
          <el-table-column :label="$t('pdtempPdAcc.choose')" align="center"
                           width="50">
            <template slot-scope="scope">
              <el-radio-group v-model="selectedPdClm" @change="selectedPdClmChanged">
                <el-radio :label="scope.row">{{ '' }}</el-radio>
              </el-radio-group>
            </template>
          </el-table-column>
          <el-table-column :label="$t('table.id')" align="center" type="index" width="50"></el-table-column>
          <el-table-column :label="$t('pdClaimVerificationRules1.pdBnftCtrlOrder')" align="center"
                           prop="pdBnftCtrlOrder"></el-table-column>
          <el-table-column :filter-method="filters_pdBnftCtrlLimLevel_mehtod" :filters="filters_pdBnftCtrlLimLevel"
                           :label="$t('i18nView.pdBnftCtrlLimLevel')"
                           align="center"
                           prop="pdBnftCtrlLimLevel">
            <template v-slot="scope">
              {{ scope.row.pdBnftCtrlLimLevel | filter_pdBnftCtrlLimLevel }}
            </template>
          </el-table-column>
          <el-table-column :label="$t('pdClaimVerificationRules1.pdBnftCtrlLimCode')" align="center"
                           prop="pdBnftCtrlLimCode">
            <template v-slot="scope">
                <span>{{
                    _.map(scope.row.pdtempClmCtrlLimRelaVoList, item => {
                      return item.pdBnftCtrlConCode + ':' + item.pdBnftCtrlConName
                    }).join(', ')
                  }}</span>
            </template>
          </el-table-column>
          <el-table-column :filter-method="filters_pdBnftCumType_mehtod" :filters="filters_pdBnftCumType"
                           :label="$t('i18nView.pdBnftCumType')"
                           align="center"
                           prop="pdBnftCumType">
            <template v-slot="scope">
              {{ scope.row.pdBnftCumType | filter_pdBnftCumType }}
            </template>
          </el-table-column>
          <el-table-column :label="$t('pdClaimVerificationRules1.pdBnftCumFrequencyUnitVal')" align="center"
                           prop="pdBnftCumFrequency"> </el-table-column>
          <el-table-column :filter-method="filters_pdBnftFactorType_mehtod" :filters="filters_pdBnftFactorType"
                           :label="$t('i18nView.pdBnftFactorType')"
                           align="center"
                           prop="pdBnftFactorType">
            <template v-slot="scope">
              {{ scope.row.pdBnftFactorType | filter_pdBnftFactorType }}
            </template>
          </el-table-column>
          <el-table-column :label="$t('pdClaimVerificationRules1.pdBnftFactorLimValue')" align="center"
                           prop="pdBnftFactorValue">
            <template v-slot="scope">
              <div v-if="scope.row.pdBnftFactorValue">
              {{
                scope.row.pdBnftFactorValue + ' ' + (scope.row.pdBnftFactorType === '1' ? '元' : (scope.row.pdBnftFactorType === '2' ? '天' : '次'))
              }}
              </div>
            </template>
          </el-table-column>
          <el-table-column :label="$t('pdClaimVerificationRules1.limitCalc')" align="center"
                           prop="pdBnftFactorValueCalCode">
           <template slot-scope="scope">
              <span>{{ scope.row.pdBnftFactorValueCalCode }}
                <svg-icon v-if="scope.row.pdBnftFactorValueCalCode" icon-class="calc" style="color: #606266;font-size: 18px;cursor: pointer"
                            @click="toFormula(scope.row)"/></span>
           </template>
         </el-table-column>
          <el-table-column align="center" :label="$t('pdtempPdMedFeeBill.actions')" width="100">
            <template slot-scope="scope">
              <cus-del-btn icon="el-icon-delete" size="mini" type="danger" @ok="deleteBnftForm(scope.row)"></cus-del-btn>
            </template>
          </el-table-column>
          <!--<el-table-column align="center" label="关联项" width="100">
            <template v-slot="scope">
              <el-button dialog-disable="disable" size="small" type="text" @click="showRelatedItems(scope.row)">>></el-button>
            </template>
          </el-table-column>-->
        </el-table>
        <cus-pagination ref="page_L" v-model="pdQuotaItemList" :autoBuild="false" :pageSize="5" :params="params"
                        url="/product-compensation/base/pagePdtempClmCtrlLimVo"/>

        <!-- 限额快捷定义 -->
        <cus-condition :label="$t('pdClaimVerificationRules1.pdQuotaItem_quick_def')" style="margin-top: 10px"
                       @show="quickFlag_L = !quickFlag_L"></cus-condition>
        <div v-if="quickFlag_L" style="margin-top: 10px">
          <el-form label-width="auto">
            <el-row :gutter="10" justify="space-between" type="flex">
               <cus-col :span="8">
                <el-form-item :label="$t('rule.productDetailType')">
                  <cus-select v-model="quickParams.productDetailType" :codetype="'ProductCategory'"
                              @change="productDetailTypeChanged"></cus-select>
                </el-form-item>
              </cus-col>
               <cus-col :span="8">
                <el-form-item :label="$t('customComponents.product')">
                  <el-select v-model="quickParams.pdInfoId" clearable filterable @change="pdInfoIdChanged">
                    <el-option v-for="item in productsInQuick" :key="item.id"
                               :label="item.pdCode + ':' + item.pdName" :value="item.id"></el-option>
                  </el-select>
                </el-form-item>
              </cus-col>
              <cus-col :span="8">
                <el-form-item :label="$t('i18nView.pdBnftCtrlLimLevel')">
                  <cus-select v-model="quickParams.pdBnftCtrlLimLevel" codetype="limitlevel"
                              @change="pdBnftCtrlLimLevelInQuickChanged"   :filter="pdBnftCtrlLimLevelFilter"></cus-select>
                </el-form-item>
              </cus-col>
            </el-row>
            <el-row :gutter="10" justify="space-between" type="flex">
              <cus-col :span="8">
                <el-form-item :label="$t('i18nView.pdBnftFactorType')">
                  <cus-select v-model="quickParams.pdBnftFactorType" :codetype="'pdBnftFactorType1'"></cus-select>
                </el-form-item>
              </cus-col>
              <cus-col :span="8">
                <el-form-item v-if="quickParams.pdBnftCtrlLimLevel === '5' || quickParams.pdBnftCtrlLimLevel === '6'"
                              :label="$t('i18nView.pdBnftDetailType')">
                  <cus-select v-model="quickParams.pdBnftCtrlLimCode" :codetype="'pdclmbnfttype2'"></cus-select>
                </el-form-item>
                <el-form-item v-if="quickParams.pdBnftCtrlLimLevel === '7' || quickParams.pdBnftCtrlLimLevel === '8'"
                              :label="$t('i18nView.medBillType')">
                  <cus-select v-model="quickParams.pdBnftCtrlLimCode" :codetype="'medBillType'"></cus-select>
                </el-form-item>
                <el-form-item v-if="quickParams.pdBnftCtrlLimLevel === '3' || quickParams.pdBnftCtrlLimLevel === '4'"
                              :label="$t('i18nView.productSolution')">
                  <el-select v-model="quickParams.pdBnftCtrlLimCode" clearable filterable>
                    <el-option v-for="item in programmesInQuick" :key="item.id"
                               :label="item.pdProgCode + ':' + item.pdProgName" :value="item.pdProgCode"></el-option>
                  </el-select>
                </el-form-item>
              </cus-col>
              <cus-col :span="8">
                <el-button dialog-disable="disable" icon="el-icon-search" type="primary" @click="searchInQuick">{{$t('table.search')}}</el-button>
              </cus-col>
            </el-row>
          </el-form>
          <cus-table-title :label="$t('i18nView.quotaItem')"></cus-table-title>
          <el-table ref="singleTable" :data="pdQuotaItemListInQuick" border element-loading-text="Loading"
                    highlight-current-row size="mini">
            <el-table-column :label="$t('table.id')" align="center" type="index" width="50"></el-table-column>
            <el-table-column :label="$t('table.detail')" align="center" type="expand">
              <template slot-scope="props">
                <el-form class="demo-table-expand" inline label-position="left">
                  <el-form-item :label="$t('i18nView.pdBnftCumType')" style="width: 50%">
                    <cus-radio v-model="props.row.pdBnftCumType" codetype="pdBnftCumType" disabled></cus-radio>
                  </el-form-item>
                  <el-form-item :label="$t('i18nView.pdBnftCumFrequency')" style="width: 50%">
                    <span>{{ props.row.pdBnftCumFrequency }}</span>
                  </el-form-item>
                  <el-form-item :label="$t('pdClaimVerificationRules1.pdBnftCumFrequencyUnitVal')" style="width: 50%">
                    <span>{{ props.row.pdBnftCumFrequencyUnit | filter_pdBnftCumFrequencyUnit }}</span>
                  </el-form-item>
                  <el-form-item :label="$t('i18nView.pdBnftFactorType')" style="width: 50%">
                    <span>{{ props.row.pdBnftFactorType | filter_pdBnftFactorType }}</span>
                  </el-form-item>
                  <el-form-item v-if="props.row.pdBnftFactorType === '1' &&  props.row.pdBnftFactorValue" :label="$t('i18nView.pdBnftFactorValue')" style="width: 50%">
                    <span>{{ props.row.pdBnftFactorValue + ' 元' }}</span>
                  </el-form-item>
                  <el-form-item v-if="props.row.pdBnftFactorType === '2' &&  props.row.pdBnftFactorValue" :label="$t('i18nView.limitData')" style="width: 50%">
                    <span>{{ props.row.pdBnftFactorValue + ' 天' }}</span>
                  </el-form-item>
                  <el-form-item v-if="props.row.pdBnftFactorType === '3' &&  props.row.pdBnftFactorValue" :label="$t('pdClaimVerificationRules1.limitNumber')" style="width: 50%">
                    <span>{{ props.row.pdBnftFactorValue + ' 次' }}</span>
                  </el-form-item>
                  <el-form-item :label="$t('i18nView.limitCustom')" style="width: 50%">
                    <el-switch v-model="props.row.pdBnftFactorValueCalCode ? 'Y' : 'N'" active-value="Y"
                               disabled inactive-value="N"></el-switch>
                  </el-form-item>
                  <el-form-item :label="$t('i18nView.pdBnftCtrlLimitFlag')" style="width: 50%">
                    <el-switch v-model="props.row.pdBnftCtrlLimitFlag" active-value="Y" disabled
                               inactive-value="N"></el-switch>
                  </el-form-item>

                </el-form>
              </template>
            </el-table-column>
            <el-table-column align="center" :label="$t('i18nView.pdCode')" prop="pdCode"></el-table-column>
            <el-table-column align="center" :label="$t('i18nView.pdName')" prop="pdName"></el-table-column>
            <el-table-column align="center" :label="$t('customComponents.pdEdition')" prop="pdEdition"></el-table-column>
            <el-table-column :filter-method="filters_pdBnftCtrlLimLevel_mehtod_Quick"
                             :filters="filters_pdBnftCtrlLimLevel_Quick"
                             :label="$t('i18nView.pdBnftCtrlLimLevel')"
                             align="center"
                             prop="pdBnftCtrlLimLevel">
              <template v-slot="scope">
                {{ scope.row.pdBnftCtrlLimLevel | filter_pdBnftCtrlLimLevel }}
              </template>
            </el-table-column>
            <el-table-column :label="$t('pdClaimVerificationRules1.pdBnftCtrlLimCode')" align="center" prop="pdBnftCtrlLimCode">
              <template v-slot="scope">
                <span>{{
                    _.map(scope.row.pdtempClmCtrlLimRelaVoList, item => {
                      return item.pdBnftCtrlConCode + ':' + item.pdBnftCtrlConName
                    }).join(', ')
                  }}</span>
              </template>
            </el-table-column>
            <el-table-column :filter-method="filters_pdBnftCumType_mehtod_Quick"
                             :filters="filters_pdBnftCumType_Quick"
                             :label="$t('i18nView.pdBnftCumType')"
                             align="center"
                             prop="pdBnftCumType">
              <template v-slot="scope">
                {{ scope.row.pdBnftCumType | filter_pdBnftCumType }}
              </template>
            </el-table-column>
            <el-table-column :filter-method="filters_pdBnftFactorType_mehtod_Quick"
                             :filters="filters_pdBnftFactorType_Quick"
                             :label="$t('i18nView.pdBnftFactorType')"
                             align="center"
                             prop="pdBnftFactorType">
              <template v-slot="scope">
                {{ scope.row.pdBnftFactorType | filter_pdBnftFactorType }}
              </template>
            </el-table-column>
            <!--<el-table-column align="center" label="关联项">
              <template v-slot="scope">
                <el-button dialog-disable="disable" size="small" type="text" @click="showRelatedItems(scope.row)">>></el-button>
              </template>
            </el-table-column>-->
            <el-table-column align="center" :label="$t('i18nView.belongItem')" prop="pdBnftCtrlLimIdNew" width="250">
              <template v-slot="scope">
                <el-select
                  v-if="scope.row.pdBnftCtrlLimLevel === '1' || scope.row.pdBnftCtrlLimLevel === '2' || scope.row.pdBnftCtrlLimLevel === '12'"
                  v-model="scope.row.pdBnftCtrlLimIdNew = product.id"
                  clearable disabled filterable
                  style="width: 100%">
                  <el-option :label="product.pdCode+':'+product.pdName+':'+product.pdEdition"
                             :value="product.id"></el-option>
                </el-select>
                <el-select v-if="scope.row.pdBnftCtrlLimLevel === '3' || scope.row.pdBnftCtrlLimLevel === '4'"
                           v-model="scope.row.pdBnftCtrlLimIdNew" clearable filterable style="width: 100%">
                  <el-option v-for="item in pdProgOptions" :key="item.id" :label="item.pdProgCode+':'+item.pdProgName"
                             :value="item.id">
                  </el-option>
                </el-select>
                <el-select
                  v-if="scope.row.pdBnftCtrlLimLevel === '5' || scope.row.pdBnftCtrlLimLevel === '6' || scope.row.pdBnftCtrlLimLevel === '11'"
                  v-model="scope.row.pdBnftCtrlLimIdNew" clearable filterable style="width: 100%">
                  <el-option v-for="item in pdBnftOptions" :key="item.id" :label="item.pdBnftCode+':'+item.pdBnftName"
                             :value="item.id">
                  </el-option>
                </el-select>
                <el-select v-if="scope.row.pdBnftCtrlLimLevel === '7' || scope.row.pdBnftCtrlLimLevel === '8'"
                           v-model="scope.row.pdBnftCtrlLimIdNew" clearable filterable style="width: 100%">
                  <el-option v-for="item in pdtempPdMedBillOptions" :key="item.id"
                             :label="item.pdClmBnftCode+':'+item.pdMedBillTypeName" :value="item.id"></el-option>
                </el-select>
                <el-select v-if="scope.row.pdBnftCtrlLimLevel === '9' || scope.row.pdBnftCtrlLimLevel === '10'"
                           v-model="scope.row.pdBnftCtrlLimIdNew" clearable filterable style="width: 100%">
                  <el-option v-for="item in pdMedFeeBillOptions" :key="item.id"
                             :label="item.pdMedFeeCode+':'+item.pdMedFeeName" :value="item.id"></el-option>
                </el-select>
                <el-select v-if="scope.row.pdBnftCtrlLimLevel === '13' || scope.row.pdBnftCtrlLimLevel === '14'"
                           v-model="scope.row.pdBnftCtrlLimIdNew" clearable filterable style="width: 100%">
                  <el-option v-for="item in pdClmBnftOptions" :key="item.id"
                             :label="item.pdClmBnftCode+':'+item.pdClmBnftName" :value="item.id"></el-option>
                </el-select>
              </template>
            </el-table-column>
            <el-table-column :label="$t('table.actions')" align="center">
              <template slot-scope="scope">
                <el-button dialog-disable="disable" v-auth="'product-compensation:saveInQuick'" icon="el-icon-success" size="small"
                           type="primary"
                           @click="handleSelectInQuick(scope.row)">{{$t('i18nView.copy')}}
                </el-button>
              </template>
            </el-table-column>
          </el-table>
          <cus-pagination ref="page_L_quick" v-model="pdQuotaItemListInQuick" :pageSize="5" :params="quickParams"
                          url="/product-compensation/base/pagePdtempClmCtrlLimVoInQuick"/>
        </div>

        <div>
          <cus-form-title :label="$t('pdClaimVerificationRules1.quotaDefinition')"></cus-form-title>
          <el-form ref="form_pdQuotaItem1" :model="form_pdQuotaItem" :rules="form_pdQuotaItem_rules"
                   label-width="110px">
            <cus-row>
              <cus-col :span="8">
                <el-form-item :label="$t('pdClaimVerificationRules1.pdBnftCtrlOrder')"
                              prop="accountName">
                  <el-input v-model="form_pdQuotaItem.pdBnftCtrlOrder"
                            :placeholder="$t('pdClaimVerificationRules1.controlSequenceAddOne')" clearable
                            type="number"></el-input>
                </el-form-item>
              </cus-col>
               <cus-col :span="8">
                <el-form-item :label="$t('i18nView.pdBnftCtrlLimitFlag')">
                  <el-switch v-model="form_pdQuotaItem.pdBnftCtrlLimitFlag" active-value="Y" inactive-value="N">
                  </el-switch>
                </el-form-item>
              </cus-col>
              <cus-col :span="8"></cus-col>
            </cus-row>
             <cus-row>
               <cus-col :span="8">
                <el-form-item :label="$t('i18nView.pdBnftCtrlLimLevel')" prop="pdBnftCtrlLimLevel" key="pdBnftCtrlLimLevel" >
                  <cus-select v-model="form_pdQuotaItem.pdBnftCtrlLimLevel" :codetype="'limitlevel'"
                              @change="pdBnftCtrlLimLevelChanged"  :filter="pdBnftCtrlLimLevelFilter"></cus-select>
                </el-form-item>
              </cus-col>
            <cus-col
                v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='4' || form_pdQuotaItem.pdBnftCtrlLimLevel==='6' || form_pdQuotaItem.pdBnftCtrlLimLevel==='14' || form_pdQuotaItem.pdBnftCtrlLimLevel==='10'"
                :span="8">
                <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='4'" :label="$t('i18nView.programInformation')" prop="pdBnftCtrlLimCode" key="pdBnftCtrlLimCode">
                  <el-select v-model="form_pdQuotaItem.pdBnftCtrlLimCode" clearable filterable multiple>
                    <el-option v-for="item in pdProgOptions"
                               :key="item.id"
                               :label="item.pdProgCode+':'+item.pdProgName"
                               :value="item.pdProgCode">
                    </el-option>
                  </el-select>
                </el-form-item>
                <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='6'" :label="$t('i18nView.guarantee')" prop="pdBnftCtrlLimCode" key="pdBnftCtrlLimCode">
                  <el-select v-model="form_pdQuotaItem.pdBnftCtrlLimCode" :disabled="Object.keys(selectedPdClm).length > 0" clearable filterable multiple>
                    <el-option v-for="item in pdBnftOptions"
                               :key="item.id"
                               :label="item.pdBnftCode+':'+item.pdBnftName"
                               :value="item.pdBnftCode">
                    </el-option>
                  </el-select>
                </el-form-item>
                <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='14'":label="$t('pdClaimVerificationRules1.AssociatedGuaranteeDetails')" prop="pdBnftCtrlLimCode" key="pdBnftCtrlLimCode">
                  <el-select v-model="form_pdQuotaItem.pdBnftCtrlLimCode" :disabled="Object.keys(selectedPdClm).length > 0" clearable filterable multiple>
                    <el-option v-for="item in pdClmBnftOptions"
                               :key="item.id"
                               :label="item.pdClmBnftCode+':'+item.pdClmBnftName"
                               :value="item.pdClmBnftCode">
                    </el-option>
                  </el-select>
                </el-form-item>
               <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='10'" :label="$t('i18nView.clmMedFee')" multiple prop="pdBnftCtrlLimCode" key="pdBnftCtrlLimCode">
                  <el-select v-model="form_pdQuotaItem.pdBnftCtrlLimCode" :disabled="Object.keys(selectedPdClm).length > 0" clearable filterable>
                    <el-option v-for="item in pdMedFeeOptions"
                               :key="item.id"
                               :label="item.pdMedFeeCode+':'+item.pdMedFeeName"
                               :value="item.pdMedFeeCode">
                    </el-option>
                  </el-select>
                </el-form-item>
              </cus-col>
              <cus-col :span="8">
                 <el-form-item v-show="form_pdQuotaItem.pdBnftCtrlLimLevel==='1'" :label="$t('i18nView.pdSingle')">
                    <el-input disabled="disabled" v-model="product.pdCode+':'+product.pdName"></el-input>
                </el-form-item>
                <!-- 限制级别要素 -->
                <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='6'"
                              :label="$t('pdClaimVerificationRules1.pdBnftCtrlConCode')"
                              >
                  <el-select v-model="form_pdQuotaItem.pdtempPdBnftList" clearable disabled filterable multiple
                             value-key="id">
                    <el-option v-for="PdBnftitem in pdBnftList"
                               :key="PdBnftitem.id"
                               :label="PdBnftitem.pdBnftCode+':'+PdBnftitem.pdBnftName"
                               :value="PdBnftitem">
                    </el-option>
                  </el-select>
                  <el-button type="text" @click="openpdBnftDetail">{{$t('i18nView.more')}}</el-button>
                </el-form-item>
                <el-form-item
                  v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='5' || form_pdQuotaItem.pdBnftCtrlLimLevel==='11'" key="pdtempPdBnft"
                  :label="$t('pdClaimVerificationRules1.pdBnftFactorLimType')" prop="pdtempPdBnft" 
                  >
                  <el-select v-model="form_pdQuotaItem.pdtempPdBnft" :disabled="Object.keys(selectedPdClm).length > 0" clearable filterable multiple value-key="id">
                    <el-option v-for="item in pdBnftOptions"
                               :key="item.id"
                               :label="item.pdBnftCode+':'+item.pdBnftName"
                               :value="item">
                    </el-option>
                  </el-select>
                </el-form-item>
                <el-form-item  v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='13'" :label="$t('i18nView.bnftinfo')" prop="pdClmBnftCode" key="pdClmBnftCode">
                  <el-select v-model="form_pdQuotaItem.pdClmBnftCode" :disabled="Object.keys(selectedPdClm).length > 0" clearable filterable multiple value-key="id">
                    <el-option v-for="item in pdClmBnftOptions"
                               :key="item.id"
                               :label="item.pdClmBnftCode+':'+item.pdClmBnftName"
                               :value="item">
                    </el-option>
                  </el-select>
                </el-form-item>
                <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='14'" :label="$t('i18nView.AssociatedGuaranteeDetails')">
                  <el-select v-model="form_pdQuotaItem.pdBnftCtrlConCode" clearable disabled filterable multiple
                             value-key="id">
                    <el-option v-for="pdClmBnft in pdClmBnftList"
                               :key="pdClmBnft.id"
                               :label="pdClmBnft.pdClmBnftCode+':'+pdClmBnft.pdClmBnftName"
                               :value="pdClmBnft">
                    </el-option>
                  </el-select>
                  <el-button type="text" @click="openPdClmBnftDetail">{{$t('i18nView.more')}}</el-button>
                </el-form-item>
                <el-form-item  v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='4'"
                              :label="$t('pdClaimVerificationRules1.AssociatedPlan')"
                            >
                  <el-select v-model="form_pdQuotaItem.pdtempPdProgList" clearable disabled filterable multiple
                             value-key="id">
                    <el-option v-for="item in pdProgList"
                               :key="item.id"
                               :label="item.pdProgCode+':'+item.pdProgName"
                               :value="item">
                    </el-option>
                  </el-select>
                  <el-button dialog-disable="disable" type="text" @click="openpdProgDetail">{{$t('i18nView.more')}}</el-button>
                </el-form-item>
                <el-form-item  v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='3'"
                              :label="$t('pdClaimVerificationRules1.pdPlan')"
                              prop="pdtempPdProg"
                               key = "pdtempPdProg"
                          >
                  <el-select v-model="form_pdQuotaItem.pdtempPdProg" clearable filterable multiple value-key="id">
                    <el-option v-for="item in pdProgOptions"
                               :key="item.id"
                               :label="item.pdProgCode+':'+item.pdProgName"
                               :value="item">
                    </el-option>
                  </el-select>
                </el-form-item>
                <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='10'"
                              :label="$t('pdClaimVerificationRules1.AssociatedBillMoney')"
                             >
                  <el-select v-model="form_pdQuotaItem.pdtempPdMedFeeBillList" clearable disabled filterable
                             multiple
                             value-key="id">
                    <el-option v-for="item in PdMedFeeBillList"
                               :key="item.id"
                               :label="item.pdMedFeeCode+':'+item.pdMedFeeName"
                               :value="item">
                    </el-option>
                  </el-select>
                  <el-button dialog-disable="disable" type="text" @click="openpdMedFeeBillDetail">{{$t('i18nView.more')}}</el-button>
                </el-form-item>
                <el-form-item  v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='9'"
                              :label="$t('pdClaimVerificationRules1.pdAssociatedBillMoney')" prop="pdtempPdMedFeeBill" key="pdtempPdMedFeeBill">
                  <el-select v-model="form_pdQuotaItem.pdtempPdMedFeeBill"  :disabled="Object.keys(selectedPdClm).length > 0" filterable multiple value-key="id">
                    <el-option v-for="item in pdMedFeeOptions"
                               :key="item.id"
                               :label="item.pdMedFeeCode+':'+item.pdMedFeeName"
                               :value="item">
                    </el-option>
                  </el-select>
                </el-form-item>
                <el-form-item  v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='8'"
                              :label="$t('pdClaimVerificationRules1.AssociatedBill')">
                  <el-select v-model="form_pdQuotaItem.pdtempPdMedBillVoList" clearable disabled filterable
                             multiple
                             value-key="id">
                    <el-option v-for="item in pdtempPdMedBillList"
                               :key="item.id"
                               :label="item.pdClmBnftCode+':'+item.pdMedBillTypeName"
                               :value="item">
                    </el-option>
                  </el-select>
                  <el-button dialog-disable="disable" type="text" @click="openpdClmBnftDetail">{{$t('i18nView.more')}}</el-button>
                </el-form-item>
                <el-form-item  v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='7'"
                              :label="$t('pdClaimVerificationRules1.pdAssociatedBill')" prop="pdtempPdMedBillVo" key="pdtempPdMedBillVo">
                  <el-select v-model="form_pdQuotaItem.pdtempPdMedBillVo" clearable filterable value-key="id">
                    <el-option v-for="item in pdtempPdMedBillOptions"
                               :key="item.id"
                               :label="item.pdClmBnftCode+':'+item.pdMedBillTypeName"
                               :value="item">
                    </el-option>
                  </el-select>
                </el-form-item>
                <el-form-item  v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='2'"
                              :label="$t('pdClaimVerificationRules1.pdRelated')">
                  <el-select v-model="form_pdQuotaItem.pdtempPdInfoList" clearable disabled filterable multiple
                             value-key="id">
                    <el-option v-for="item in pdList"
                               :key="item.id"
                               :label="item.pdCode+':'+item.pdName"
                               :value="item">
                    </el-option>
                  </el-select>
                  <el-button dialog-disable="disable" type="text" @click="openpdPdDetail">{{$t('i18nView.more')}}</el-button>
                </el-form-item>
              </cus-col>
              <cus-col
                v-if="form_pdQuotaItem.pdBnftCtrlLimLevel!=='4' && form_pdQuotaItem.pdBnftCtrlLimLevel!=='6' && form_pdQuotaItem.pdBnftCtrlLimLevel!=='14' && form_pdQuotaItem.pdBnftCtrlLimLevel!=='10'"
                :span="8"></cus-col>
           </cus-row>
            <cus-row>
              <cus-col :span="8">
                <el-form-item :label="$t('i18nView.pdBnftCumType')">
                  <cus-radio v-model="form_pdQuotaItem.pdBnftCumType" :codetype="'pdBnftCumType'"></cus-radio>
                </el-form-item>
              </cus-col>
              <cus-col :span="8">
                <el-form-item :label="$t('pdClaimVerificationRules1.pdBnftCumFrequencyUnitVal')">
                  <el-input v-model="form_pdQuotaItem.pdBnftCumFrequency">
                    <cus-select slot="append" v-model="form_pdQuotaItem.pdBnftCumFrequencyUnit" :codetype="'pdBnftCumFrequencyUnit'"
                                class="cst"></cus-select>
                  </el-input>
                </el-form-item>
              </cus-col>
              <cus-col :span="8">
              </cus-col>
            </cus-row>
            <cus-row>
              <cus-col :span="8">
                <el-form-item :label="$t('i18nView.pdBnftFactorType')">
                  <cus-select v-model="form_pdQuotaItem.pdBnftFactorType" :codetype="'pdBnftFactorType1'"
                              @change="pdBnftFactorTypeChanged_L"></cus-select>
                </el-form-item>
              </cus-col>
               <cus-col :span="8">
                <el-form-item :label="$t('pdClaimVerificationRules1.pdBnftCtrlLimType')">
                    <cus-radio v-model="calBnFlag" :codetype="'bnftcuslimit'"></cus-radio>
                </el-form-item>
              </cus-col>
              <cus-col :span="8">
                <div v-if="form_pdQuotaItem.pdBnftFactorType === '1' && calBnFlag === '1'">
                  <el-form-item :label="$t('i18nView.pdBnftFactorValue')"
                                prop="pdBnftFactorValue">
                    <el-input v-model="form_pdQuotaItem.pdBnftFactorValue"></el-input>
                  </el-form-item>
                </div>
                 <div v-if="form_pdQuotaItem.pdBnftFactorType === '2' && calBnFlag === '1'">
                    <el-form-item :label="$t('i18nView.limitData')"
                                  prop="pdBnftFactorValue">
                      <el-input v-model="form_pdQuotaItem.pdBnftFactorValue">
                        <template slot="suffix">{{$t('i18nView.day')}}</template>
                      </el-input>
                    </el-form-item>
                 </div>

               <div v-if="form_pdQuotaItem.pdBnftFactorType === '3' && calBnFlag === '1'">
                <el-form-item :label="$t('pdClaimVerificationRules1.limitNumber')"
                              prop="pdBnftFactorValue">
                  <el-input v-model="form_pdQuotaItem.pdBnftFactorValue">
                    <template slot="suffix">次</template>
                  </el-input>
                </el-form-item>
               </div>
             </cus-col>

            </cus-row>
            <div v-if="calBnFlag === '2'">
              <cus-form-title :label="$t('pdClaimVerificationRules1.limitCustom')"></cus-form-title>
              <el-row style="margin-top: 10px">
                <el-form-item :label="$t('pdClaimVerificationRules1.limitCalc')">
                  <el-input v-model="form_pdQuotaItem.pdBnftFactorValueCalCode" readonly>
                    <svg-icon slot="suffix" icon-class="calc" style="color: #606266;font-size: 18px;cursor: pointer"
                              @click="toFormula(null)"/>
                  </el-input>
                </el-form-item>
              </el-row>
            </div>
          </el-form>
        </div>
        <div>
          <el-form :disabled="showPageFlag === '1'" style="width:98%;margin: 20px 0 0 0">
            <el-form-item style="text-align: right">
              <!--按钮-->
              <el-button dialog-disable="disable" v-if="Object.keys(selectedPdClm).length === 0" v-auth="'product-compensation:save'"
                         icon="el-icon-success"
                         size="small" type="primary" @click="saveCtrl('L')">{{
                  $t('table.save')
                }}
              </el-button>
              <el-button dialog-disable="disable" v-if="Object.keys(selectedPdClm).length > 0" v-auth="'product-compensation:save'"
                         icon="el-icon-success"
                         size="small"
                         style="margin-right: 10px" type="primary" @click="updateCtrl('L')">{{
                  $t('table.update')
                }}
              </el-button>
             <!-- <cus-del-btn v-if="Object.keys(selectedPdClm).length > 0" v-auth="'product-compensation:delete'"
                           :buttonText="$t('table.delete')"
                           size="small" style="margin-right: 10px" @ok="deleteCtrl">
              </cus-del-btn>-->
              <el-button dialog-disable="disable" icon="el-icon-refresh" size="small" type="warning" @click="refresh('L')">
                {{ $t('tagsView.refresh') }}
              </el-button>
            </el-form-item>
          </el-form>
        </div>
      </el-tab-pane>

      <!-- 免赔额定义 -->
      <el-tab-pane :label="$t('pdClaimVerificationRules1.deductibleExcessDefinition')"
                   name="deductibleExcessDefinition">
        <!-- 免赔额定义表格 -->
        <cus-table-title :label="$t('pdClaimVerificationRules1.pdDeduction')"></cus-table-title>
        <el-table ref="singleTable" :data="pdQuotaItemList" border element-loading-text="Loading"
                  highlight-current-row size="mini"
                  style="width: 99%" @row-click="rowClick">
          <el-table-column :label="$t('pdtempPdAcc.choose')" align="center"
                           width="50">
            <template slot-scope="scope">
              <el-radio-group v-model="selectedPdClm" @change="selectedPdClmChanged">
                <el-radio :label="scope.row">{{ '' }}</el-radio>
              </el-radio-group>
            </template>
          </el-table-column>
          <el-table-column :label="$t('table.id')" align="center" type="index" width="50"></el-table-column>
          <el-table-column :filter-method="filters_pdBnftCtrlLimLevel_mehtod" :filters="filters_pdBnftCtrlLimLevel"
                           :label="$t('i18nView.pdBnftCtrlLimLevel')"
                           align="center"
                           prop="pdBnftCtrlLimLevel">
            <template v-slot="scope">
              {{ scope.row.pdBnftCtrlLimLevel | filter_pdBnftCtrlLimLevel }}
            </template>
          </el-table-column>
          <el-table-column :label="$t('pdClaimVerificationRules1.pdBnftCtrlLimCode')" align="center"
                           prop="pdBnftCtrlLimCode">
            <template v-slot="scope">
                <span>{{
                    _.map(scope.row.pdtempClmCtrlLimRelaVoList, item => {
                      return item.pdBnftCtrlConCode + ':' + item.pdBnftCtrlConName
                    }).join(', ')
                  }}</span>
            </template>
          </el-table-column>
          <el-table-column :filter-method="filters_pdBnftCumType_mehtod" :filters="filters_pdBnftCumType"
                           :label="$t('i18nView.pdBnftCumType')"
                           align="center"
                           prop="pdBnftCumType">
            <template v-slot="scope">
              {{ scope.row.pdBnftCumType | filter_pdBnftCumType }}
            </template>
          </el-table-column>
          <el-table-column :label="$t('pdClaimVerificationRules1.pdBnftCumFrequencyUnit')" align="center"
                           prop="pdBnftCumFrequency">
            <template v-slot="scope">
              {{ scope.row.pdBnftCumFrequencyUnit | filter_pdBnftCumFrequencyUnit }}
            </template>
          </el-table-column>
          <el-table-column :filter-method="filters_pdBnftFactorType_mehtod_D" :filters="filters_pdBnftFactorType_D"
                           :label="$t('i18nView.pdBeduType')"
                           align="center"
                           prop="pdBnftFactorType">
            <template v-slot="scope">
              {{ scope.row.pdBnftFactorType | filter_pdBnftFactorType_D }}
            </template>
          </el-table-column>
          <el-table-column :label="$t('i18nView.pdBedu')" align="center"
                           prop="pdBnftFactorValue">
            <template v-slot="scope">
              {{
                scope.row.pdBnftFactorValue ? (scope.row.pdBnftFactorValue + ' ' + (scope.row.pdBnftFactorType === '2' ? '%' : '')) : ''
              }}
            </template>
          </el-table-column>
          <el-table-column :label="$t('pdClaimVerificationRules1.deductionCalc')" align="center"
                           prop="pdBnftFactorValueCalCode">
              <template slot-scope="scope">
                <span>{{ scope.row.pdBnftFactorValueCalCode }}
                  <svg-icon v-if="scope.row.pdBnftFactorValueCalCode" icon-class="calc" style="color: #606266;font-size: 18px;cursor: pointer"
                              @click="toFormula(scope.row)"/></span>
              </template>
          </el-table-column>
          <el-table-column align="center" :label="$t('pdtempPdMedFeeBill.actions')" width="100">
            <template slot-scope="scope">
              <cus-del-btn icon="el-icon-delete" size="mini" type="danger" @ok="deleteBnftForm(scope.row)"></cus-del-btn>
            </template>
          </el-table-column>
          <!--<el-table-column align="center" label="关联项" width="100">
            <template v-slot="scope">
              <el-button dialog-disable="disable" size="small" type="text" @click="showRelatedItems(scope.row)">>></el-button>
            </template>
          </el-table-column>-->
        </el-table>
        <cus-pagination ref="page_D" v-model="pdQuotaItemList" :autoBuild="false" :pageSize="5" :params="params"
                        url="/product-compensation/base/pagePdtempClmCtrlLimVo"/>

        <!-- 免赔额快捷定义 -->

        <cus-condition :label="$t('pdClaimVerificationRules1.pdDeduction_quick_def')" style="margin-top: 10px"
                       @show="quickFlag_D = !quickFlag_D"></cus-condition>
        <div v-if="quickFlag_D" style="margin-top: 10px">
          <el-form label-width="auto" style="margin: 20px">
            <el-row :gutter="10" justify="space-between" type="flex">
                <cus-col :span="8">
                <el-form-item :label="$t('rule.productDetailType')">
                  <cus-select v-model="quickParams.productDetailType" :codetype="'ProductCategory'"
                              @change="productDetailTypeChanged"></cus-select>
                </el-form-item>
              </cus-col>
              <cus-col :span="8">
                <el-form-item :label="$t('rule.product')">
                  <el-select v-model="quickParams.pdInfoId" clearable filterable @change="pdInfoIdChanged">
                    <el-option v-for="item in productsInQuick" :key="item.id"
                               :label="item.pdCode + ':' + item.pdName" :value="item.id"></el-option>
                  </el-select>
                </el-form-item>
              </cus-col>
              <cus-col :span="8">
                <el-form-item :label="$t('i18nView.pdBnftCtrlLimLevel')">
                  <cus-select v-model="quickParams.pdBnftCtrlLimLevel" codetype="limitlevel"
                              @change="pdBnftCtrlLimLevelInQuickChanged" :filter="pdBnftCtrlLimLevelFilter"></cus-select>
                </el-form-item>
              </cus-col>
            </el-row>
            <el-row :gutter="10" justify="space-between" type="flex">
               <cus-col :span="8">
                <el-form-item :label="$t('i18nView.pdBeduType')">
                  <cus-select v-model="quickParams.pdBnftFactorType" :codetype="'pdBnftFactorType'"></cus-select>
                </el-form-item>
              </cus-col>
              <cus-col :span="8">
                <el-form-item
                  v-if="quickParams.pdBnftCtrlLimLevel === '5' || quickParams.pdBnftCtrlLimLevel === '6'"
                  :label="$t('i18nView.pdBnftDetailType')">
                  <cus-select v-model="quickParams.pdBnftCtrlLimCode" :codetype="'pdclmbnfttype2'"></cus-select>
                </el-form-item>
                <el-form-item
                  v-if="quickParams.pdBnftCtrlLimLevel === '7' || quickParams.pdBnftCtrlLimLevel === '8'"
                  :label="$t('i18nView.medBillType')">
                  <cus-select v-model="quickParams.pdBnftCtrlLimCode" :codetype="'medBillType'"></cus-select>
                </el-form-item>
                <el-form-item
                  v-if="quickParams.pdBnftCtrlLimLevel === '3' || quickParams.pdBnftCtrlLimLevel === '4'"
                  :label="$t('i18nView.productSolution')">
                  <el-select v-model="quickParams.pdBnftCtrlLimCode" clearable filterable>
                    <el-option v-for="item in programmesInQuick" :key="item.id"
                               :label="item.pdProgCode + ':' + item.pdProgName"
                               :value="item.pdProgCode"></el-option>
                  </el-select>
                </el-form-item>
              </cus-col>
              <cus-col :span="8">
                <el-button  dialog-disable="disable"  icon="el-icon-search" type="primary" @click="searchInQuick">{{$t('table.search')}}</el-button>
              </cus-col>
            </el-row>
          </el-form>
          <cus-table-title :label="$t('i18nView.pdBeduItem')"></cus-table-title>
          <el-table ref="singleTable" :data="pdQuotaItemListInQuick" border element-loading-text="Loading"
                    highlight-current-row size="mini">
            <el-table-column :label="$t('table.id')" align="center" type="index" width="50"></el-table-column>
            <el-table-column :label="$t('table.detail')" align="center" type="expand">
              <template slot-scope="props">
                <el-form class="demo-table-expand" inline label-position="left">
                  <el-form-item :label="$t('i18nView.pdBnftCumType')" style="width: 50%">
                    <cus-radio v-model="props.row.pdBnftCumType" codetype="pdBnftCumType" disabled></cus-radio>
                  </el-form-item>
                  <el-form-item :label="$t('i18nView.pdBnftCumPeriod')" style="width: 50%">
                    <cus-radio v-model="props.row.pdBnftCumFrequencyUnit" :codetype="'pdBnftCumFrequencyUnit'"
                               disabled filter="1$2$3"></cus-radio>
                  </el-form-item>
                  <el-form-item :label="$t('i18nView.pdBeduType')" style="width: 50%">
                    <span>{{ props.row.pdBnftFactorType | filter_pdBnftFactorType_D }}</span>
                  </el-form-item>
                  <el-form-item v-if="props.row.pdBnftFactorType === '1'" :label="$t('i18nView.pdBeduFee')" style="width: 50%">
                    <span>{{ props.row.pdBnftFactorValue }}</span>
                  </el-form-item>
                  <el-form-item v-if="props.row.pdBnftFactorType === '2'" :label="$t('i18nView.pdRatio')" style="width: 50%">
                    <span>{{ props.row.pdBnftFactorValue + ' %' }}</span>
                  </el-form-item>
                </el-form>
              </template>
            </el-table-column>
            <el-table-column align="center" :label="$t('i18nView.pdCode')" prop="pdCode"></el-table-column>
            <el-table-column align="center" :label="$t('i18nView.pdName')" prop="pdName"></el-table-column>
            <el-table-column align="center" :label="$t('customComponents.pdEdition')" prop="pdEdition"></el-table-column>
            <el-table-column :filter-method="filters_pdBnftCtrlLimLevel_mehtod_Quick"
                             :filters="filters_pdBnftCtrlLimLevel_Quick"
                             :label="$t('i18nView.pdBnftCtrlLimLevel')"
                             align="center"
                             prop="pdBnftCtrlLimLevel">
              <template v-slot="scope">
                {{ scope.row.pdBnftCtrlLimLevel | filter_pdBnftCtrlLimLevel }}
              </template>
            </el-table-column>
            <el-table-column :label="$t('pdClaimVerificationRules1.pdBnftCtrlLimCode')" align="center"
                             prop="pdBnftCtrlLimCode">
              <template v-slot="scope">
                <span>{{
                    _.map(scope.row.pdtempClmCtrlLimRelaVoList, item => {
                      return item.pdBnftCtrlConCode + ':' + item.pdBnftCtrlConName
                    }).join(', ')
                  }}</span>
              </template>
            </el-table-column>
            <el-table-column :filter-method="filters_pdBnftCumType_mehtod_Quick"
                             :filters="filters_pdBnftCumType_Quick"
                             :label="$t('i18nView.pdBnftCumType')"
                             align="center"
                             prop="pdBnftCumType">
              <template v-slot="scope">
                {{ scope.row.pdBnftCumType | filter_pdBnftCumType }}
              </template>
            </el-table-column>
            <el-table-column :filter-method="filters_pdBnftFactorType_mehtod_D_Quick"
                             :filters="filters_pdBnftFactorType_D_Quick"
                             :label="$t('i18nView.pdBnftFactorType')"
                             align="center"
                             prop="pdBnftFactorType">
              <template v-slot="scope">
                {{ scope.row.pdBnftFactorType | filter_pdBnftFactorType_D }}
              </template>
            </el-table-column>
            <!--<el-table-column align="center" label="关联项">
              <template v-slot="scope">
                <el-button dialog-disable="disable" size="small" type="text" @click="showRelatedItems(scope.row)">>></el-button>
              </template>
            </el-table-column>-->
            <el-table-column align="center" :label="$t('i18nView.belongItem')" prop="pdBnftCtrlLimIdNew" width="250">
              <template v-slot="scope">
                <el-select
                  v-if="scope.row.pdBnftCtrlLimLevel === '1' || scope.row.pdBnftCtrlLimLevel === '2' || scope.row.pdBnftCtrlLimLevel === '12'"
                  v-model="scope.row.pdBnftCtrlLimIdNew = product.id"
                  clearable disabled filterable
                  style="width: 100%">
                  <el-option :label="product.pdCode+':'+product.pdName+':'+product.pdEdition"
                             :value="product.id"></el-option>
                </el-select>
                <el-select v-if="scope.row.pdBnftCtrlLimLevel === '3' || scope.row.pdBnftCtrlLimLevel === '4'"
                           v-model="scope.row.pdBnftCtrlLimIdNew" clearable filterable style="width: 100%">
                  <el-option v-for="item in pdProgOptions" :key="item.id" :label="item.pdProgCode+':'+item.pdProgName"
                             :value="item.id">
                  </el-option>
                </el-select>
                <el-select
                  v-if="scope.row.pdBnftCtrlLimLevel === '5' || scope.row.pdBnftCtrlLimLevel === '6' || scope.row.pdBnftCtrlLimLevel === '11'"
                  v-model="scope.row.pdBnftCtrlLimIdNew" clearable filterable style="width: 100%">
                  <el-option v-for="item in pdBnftOptions" :key="item.id" :label="item.pdBnftCode+':'+item.pdBnftName"
                             :value="item.id">
                  </el-option>
                </el-select>
                <el-select v-if="scope.row.pdBnftCtrlLimLevel === '7' || scope.row.pdBnftCtrlLimLevel === '8'"
                           v-model="scope.row.pdBnftCtrlLimIdNew" clearable filterable style="width: 100%">
                  <el-option v-for="item in pdtempPdMedBillOptions" :key="item.id"
                             :label="item.pdClmBnftCode+':'+item.pdMedBillTypeName" :value="item.id"></el-option>
                </el-select>
                <el-select v-if="scope.row.pdBnftCtrlLimLevel === '9' || scope.row.pdBnftCtrlLimLevel === '10'"
                           v-model="scope.row.pdBnftCtrlLimIdNew" clearable filterable style="width: 100%">
                  <el-option v-for="item in pdMedFeeBillOptions" :key="item.id"
                             :label="item.pdMedFeeCode+':'+item.pdMedFeeName" :value="item.id"></el-option>
                </el-select>
                <el-select v-if="scope.row.pdBnftCtrlLimLevel === '13' || scope.row.pdBnftCtrlLimLevel === '14'"
                           v-model="scope.row.pdBnftCtrlLimIdNew" clearable filterable style="width: 100%">
                  <el-option v-for="item in pdClmBnftOptions" :key="item.id"
                             :label="item.pdClmBnftCode+':'+item.pdClmBnftName" :value="item.id"></el-option>
                </el-select>
              </template>
            </el-table-column>
            <el-table-column :label="$t('table.actions')" align="center">
              <template slot-scope="scope">
                <el-button dialog-disable="disable" v-auth="'product-compensation:saveInQuick'" icon="el-icon-success" size="small"
                           type="primary"
                           @click="saveInQuickDeductible(scope.row)">{{$t('i18nView.copy')}}
                </el-button>
              </template>
            </el-table-column>
          </el-table>
          <cus-pagination ref="page_D_quick" v-model="pdQuotaItemListInQuick" :pageSize="5" :params="quickParams"
                          url="/product-compensation/base/pagePdtempClmCtrlLimVoInQuick"/>
        </div>
        <cus-form-title :label="$t('pdClaimVerificationRules1.deductibleExcessDefinition')"
                        ></cus-form-title>
        <el-form ref="form_pdQuotaItem2" :model="form_pdQuotaItem" :rules="form_pdQuotaItem_rules"
                 label-width="110px" style="width:98%;">
          <cus-row>
            <cus-col :span="8" >
              <el-form-item :label="$t('i18nView.pdBnftCtrlLimLevel')" prop="pdBnftCtrlLimLevel" key="pdBnftCtrlLimLevel">

                  <cus-select v-model="form_pdQuotaItem.pdBnftCtrlLimLevel" :codetype="'limitlevel'"
                              @change="pdBnftCtrlLimLevelChanged" :filter="pdBnftCtrlLimLevelFilter"></cus-select>

              </el-form-item>
            </cus-col>
            <cus-col v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='4' || form_pdQuotaItem.pdBnftCtrlLimLevel==='6' || form_pdQuotaItem.pdBnftCtrlLimLevel==='14' || form_pdQuotaItem.pdBnftCtrlLimLevel==='10'" :span="8">
              <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='4'" :label="$t('i18nView.programInformation')"  prop="pdBnftCtrlLimCode" key="pdBnftCtrlLimCode">
                <el-select v-model="form_pdQuotaItem.pdBnftCtrlLimCode" :disabled="Object.keys(selectedPdClm).length > 0" clearable filterable multiple>
                  <el-option v-for="item in pdProgOptions"
                             :key="item.id"
                             :label="item.pdProgCode+':'+item.pdProgName"
                             :value="item.pdProgCode">
                  </el-option>
                </el-select>
              </el-form-item>
              <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='6'" :label="$t('i18nView.guarantee')"  prop="pdBnftCtrlLimCode" key="pdBnftCtrlLimCode">
                <el-select v-model="form_pdQuotaItem.pdBnftCtrlLimCode"  :disabled="Object.keys(selectedPdClm).length > 0" clearable filterable multiple>
                  <el-option v-for="item in pdBnftOptions"
                             :key="item.id"
                             :label="item.pdBnftCode+':'+item.pdBnftName"
                             :value="item.pdBnftCode">
                  </el-option>
                </el-select>
              </el-form-item>
              <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='14'" :disabled="Object.keys(selectedPdClm).length > 0" :label="$t('pdClaimVerificationRules1.AssociatedGuaranteeDetails')"  prop="pdBnftCtrlLimCode" key="pdBnftCtrlLimCode">
                <el-select v-model="form_pdQuotaItem.pdBnftCtrlLimCode" :disabled="Object.keys(selectedPdClm).length > 0" clearable filterable multiple>
                  <el-option v-for="item in pdClmBnftOptions"
                             :key="item.id"
                             :label="item.pdClmBnftCode+':'+item.pdClmBnftName"
                             :value="item.pdClmBnftCode">
                  </el-option>
                </el-select>
              </el-form-item>
             <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='10'" :label="$t('i18nView.clmMedFee')"  prop="pdBnftCtrlLimCode" key="pdBnftCtrlLimCode">
                <el-select v-model="form_pdQuotaItem.pdBnftCtrlLimCode" :disabled="Object.keys(selectedPdClm).length > 0" clearable filterable multiple>
                <el-option v-for="item in pdMedFeeOptions" :key="item.id" :label="item.pdMedFeeCode+':'+item.pdMedFeeName"
                :value="item.pdMedFeeCode">
                </el-option>
                </el-select>
                </el-form-item>
            </cus-col>
            <cus-col :span="8">
              <!-- 限制级别要素 -->
                <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='9'"
                            :label="$t('pdClaimVerificationRules1.pdAssociatedBillMoney')"
                            prop="pdtempPdMedFeeBill" key="pdtempPdMedFeeBill">
                <el-select v-model="form_pdQuotaItem.pdtempPdMedFeeBill" :disabled="Object.keys(selectedPdClm).length > 0" clearable filterable multiple value-key="id">
                  <el-option v-for="item in pdMedFeeOptions"
                             :key="item.id"
                             :label="item.pdMedFeeCode+':'+item.pdMedFeeName"
                             :value="item">
                  </el-option>
                </el-select>
              </el-form-item>
               <el-form-item
                v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='5' || form_pdQuotaItem.pdBnftCtrlLimLevel==='11'"
                :label="$t('pdClaimVerificationRules1.pdBnftFactorLimType')" prop="pdtempPdBnft" key="pdtempPdBnft"
                >
                <el-select v-model="form_pdQuotaItem.pdtempPdBnft" :disabled="Object.keys(selectedPdClm).length > 0"  clearable filterable multiple value-key="id">
                  <el-option v-for="item in pdBnftOptions"
                             :key="item.id"
                             :label="item.pdBnftCode+':'+item.pdBnftName"
                             :value="item">
                  </el-option>
                </el-select>
              </el-form-item>
              <el-form-item v-show="form_pdQuotaItem.pdBnftCtrlLimLevel==='1'" :label="$t('i18nView.pdSingle')">
                    <el-input disabled="disabled" v-model="product.pdCode+':'+product.pdName"></el-input>
              </el-form-item>
              <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='7'"
                          :label="$t('pdClaimVerificationRules1.pdAssociatedBill')" prop="pdtempPdMedBillVo" key="pdtempPdMedBillVo">
              <el-select v-model="form_pdQuotaItem.pdtempPdMedBillVo" :disabled="Object.keys(selectedPdClm).length > 0" clearable filterable value-key="id">
                <el-option v-for="item in pdtempPdMedBillOptions"
                            :key="item.id"
                            :label="item.pdClmBnftCode+':'+item.pdMedBillTypeName"
                            :value="item">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='3'"
                    :label="$t('pdClaimVerificationRules1.pdPlan')"
                    prop="pdtempPdProg"
                     key = "pdtempPdProg"
                    >
            <el-select v-model="form_pdQuotaItem.pdtempPdProg" :disabled="Object.keys(selectedPdClm).length > 0" clearable filterable multiple value-key="id">
              <el-option v-for="item in pdProgOptions"
                          :key="item.id"
                          :label="item.pdProgCode+':'+item.pdProgName"
                          :value="item">
              </el-option>
            </el-select>
          </el-form-item>
          <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='13'" :label="$t('i18nView.bnftinfo')" prop="pdClmBnftCode" key="pdClmBnftCode">
          <el-select v-model="form_pdQuotaItem.pdClmBnftCode" :disabled="Object.keys(selectedPdClm).length > 0" clearable filterable multiple value-key="id">
            <el-option v-for="item in pdClmBnftOptions"
                        :key="item.id"
                        :label="item.pdClmBnftCode+':'+item.pdClmBnftName"
                        :value="item">
            </el-option>
          </el-select>
        </el-form-item>
        <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='6'"
                      :label="$t('pdClaimVerificationRules1.pdBnftCtrlConCode')"
                      >
          <el-select v-model="form_pdQuotaItem.pdtempPdBnftList" clearable disabled filterable multiple
                      value-key="id">
            <el-option v-for="PdBnftitem in pdBnftList"
                        :key="PdBnftitem.id"
                        :label="PdBnftitem.pdBnftCode+':'+PdBnftitem.pdBnftName"
                        :value="PdBnftitem">
            </el-option>
          </el-select>
          <el-button dialog-disable="disable" type="text" @click="openpdBnftDetail">{{$t('i18nView.more')}}</el-button>
        </el-form-item>

          <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='14'" :label="$t('i18nView.AssociatedGuaranteeDetails')">
            <el-select v-model="form_pdQuotaItem.pdBnftCtrlConCode" clearable disabled filterable multiple
                        value-key="id">
              <el-option v-for="pdClmBnft in pdClmBnftList"
                          :key="pdClmBnft.id"
                          :label="pdClmBnft.pdClmBnftCode+':'+pdClmBnft.pdClmBnftName"
                          :value="pdClmBnft">
              </el-option>
            </el-select>
            <el-button dialog-disable="disable" type="text" @click="openPdClmBnftDetail">{{$t('i18nView.more')}}</el-button>
          </el-form-item>
          <el-form-item v-show="form_pdQuotaItem.pdBnftCtrlLimLevel==='4'"
                        :label="$t('pdClaimVerificationRules1.AssociatedPlan')"
                        >
            <el-select v-model="form_pdQuotaItem.pdtempPdProgList" clearable disabled filterable multiple
                        value-key="id">
              <el-option v-for="item in pdProgList"
                          :key="item.id"
                          :label="item.pdProgCode+':'+item.pdProgName"
                          :value="item">
              </el-option>
            </el-select>
            <el-button dialog-disable="disable" type="text" @click="openpdProgDetail">{{$t('i18nView.more')}}</el-button>
          </el-form-item>

          <el-form-item v-show="form_pdQuotaItem.pdBnftCtrlLimLevel==='10'"
                        :label="$t('pdClaimVerificationRules1.AssociatedBillMoney')"
                        >
            <el-select v-model="form_pdQuotaItem.pdtempPdMedFeeBillList" clearable disabled filterable
                        multiple
                        value-key="id">
              <el-option v-for="item in PdMedFeeBillList"
                          :key="item.id"
                          :label="item.pdMedFeeCode+':'+item.pdMedFeeName"
                          :value="item">
              </el-option>
            </el-select>
            <el-button dialog-disable="disable" type="text" @click="openpdMedFeeBillDetail">{{$t('i18nView.more')}}</el-button>
          </el-form-item>

          <el-form-item v-show="form_pdQuotaItem.pdBnftCtrlLimLevel==='8'"
                        :label="$t('pdClaimVerificationRules1.AssociatedBill')">
            <el-select v-model="form_pdQuotaItem.pdtempPdMedBillVoList" clearable disabled filterable
                        multiple
                        value-key="id">
              <el-option v-for="item in pdtempPdMedBillList"
                          :key="item.id"
                          :label="item.pdClmBnftCode+':'+item.pdMedBillTypeName"
                          :value="item">
              </el-option>
            </el-select>
            <el-button dialog-disable="disable" type="text" @click="openpdClmBnftDetail">{{$t('i18nView.more')}}</el-button>
          </el-form-item>

              <el-form-item v-show="form_pdQuotaItem.pdBnftCtrlLimLevel==='2'"
                            :label="$t('pdClaimVerificationRules1.pdRelated')">
                <el-select v-model="form_pdQuotaItem.pdtempPdInfoList" clearable disabled filterable multiple
                           value-key="id">
                  <el-option v-for="item in pdList"
                             :key="item.id"
                             :label="item.pdCode+':'+item.pdName"
                             :value="item">
                  </el-option>
                </el-select>
                <el-button dialog-disable="disable" type="text" @click="openpdPdDetail">{{$t('i18nView.more')}}</el-button>
              </el-form-item>
            </cus-col>
            <cus-col
              v-if="form_pdQuotaItem.pdBnftCtrlLimLevel!=='4' && form_pdQuotaItem.pdBnftCtrlLimLevel!=='6' && form_pdQuotaItem.pdBnftCtrlLimLevel!=='14' && form_pdQuotaItem.pdBnftCtrlLimLevel!=='10' "
              :span="8"></cus-col>
          </cus-row>
          <!-- 限制级别要素 -->
          <cus-row>
            <cus-col :span="8">
              <el-form-item :label="$t('i18nView.pdBnftCumType')">
                <cus-radio v-model="form_pdQuotaItem.pdBnftCumType" :codetype="'pdBnftCumType'"></cus-radio>
              </el-form-item>
            </cus-col>
            <cus-col :span="8">
              <el-form-item :label="$t('pdClaimVerificationRules1.pdBnftCumFrequencyUnit')">
                  <cus-radio v-model="form_pdQuotaItem.pdBnftCumFrequencyUnit" :codetype="'pdBnftCumFrequencyUnit'"
                             filter="1$2$3"></cus-radio>
              </el-form-item>
            </cus-col>
            <cus-col :span="8">
                <el-form-item :label="$t('pdClaimVerificationRules1.deductibleType')">
                      <cus-radio v-model="form_pdQuotaItem.pdBnftFactorType" :codetype="'pdBnftFactorType'"
                              @changeMethod="pdBnftFactorTypeChanged_D"></cus-radio>
              </el-form-item>
            </cus-col>
          </cus-row>
          <cus-row>
            <cus-col :span="8">
              <el-form-item :label="$t('i18nView.pdBeduFee')"
                            prop="pdBnftFactorValue">
                <el-input v-model="form_pdQuotaItem.pdBnftFactorValue" :disabled="form_pdQuotaItem.pdBnftFactorType === '1'? false :'disabled'"></el-input>
              </el-form-item>
            </cus-col>
            <cus-col :span="8">
              <el-form-item :label="$t('i18nView.pdRatio')"
                            prop="pdBnftFactorValue">
                <el-input v-model="form_pdQuotaItem.pdBnftFactorValue1" :disabled="form_pdQuotaItem.pdBnftFactorType === '2'? false :'disabled'">
                  <template slot="suffix">%</template>
                </el-input>
              </el-form-item>
            </cus-col>
            <cus-col :span="8">
            </cus-col>
          </cus-row>
          <div v-if="form_pdQuotaItem.pdBnftFactorType === '3'">
            <cus-form-title :label="$t('pdClaimVerificationRules1.deductionCustom')"
                           ></cus-form-title>
            <cus-row style="margin-top: 10px;margin-left: 3px">
              <cus-col>
                <el-form-item :label="$t('pdClaimVerificationRules1.deductionCalc')">
                  <el-input v-model="form_pdQuotaItem.pdBnftFactorValueCalCode" readonly>
                    <svg-icon slot="suffix" icon-class="calc" style="color: #606266;font-size: 18px;cursor: pointer"
                              @click="toFormula(null)"/>
                  </el-input>
                </el-form-item>
              </cus-col>
            </cus-row>
          </div>
        </el-form>
        <div>
          <el-form :disabled="showPageFlag === '1'" style="width:98%;margin: 20px 0 0 0">
            <el-form-item style="text-align: right">
              <!--按钮-->
              <el-button dialog-disable="disable" v-if="Object.keys(selectedPdClm).length === 0" v-auth="'product-compensation:save'"
                         icon="el-icon-success"
                         size="small" type="primary" @click="saveDeductible('D')">{{
                  $t('table.save')
                }}
              </el-button>
              <el-button dialog-disable="disable" v-if="Object.keys(selectedPdClm).length > 0" v-auth="'product-compensation:save'"
                         icon="el-icon-success"
                         size="small"
                         style="margin-right: 10px" type="primary" @click="updateCtrl('D')">{{
                  $t('table.update')
                }}
              </el-button>
             <!-- <cus-del-btn v-if="Object.keys(selectedPdClm).length > 0" v-auth="'product-compensation:delete'"
                           :buttonText="$t('table.delete')"
                           size="small" style="margin-right: 10px" @ok="deleteDeductible">
              </cus-del-btn> -->
              <el-button dialog-disable="disable" icon="el-icon-refresh" size="small" type="warning" @click="refresh('D')">
                {{ $t('tagsView.refresh') }}
              </el-button>
            </el-form-item>
          </el-form>
        </div>
      </el-tab-pane>

      <!-- 观察期定义 -->
      <el-tab-pane :label="$t('pdClaimVerificationRules1.observationDefinition')"
                   name="observationDefinition">
        <!-- 观察期定义表格 -->
        <cus-table-title :label="$t('pdClaimVerificationRules1.pdObservation')"></cus-table-title>
        <el-table ref="singleTable" :data="pdQuotaItemList" border element-loading-text="Loading"
                  highlight-current-row size="mini" @row-click="rowClick">
          <el-table-column :label="$t('pdtempPdAcc.choose')" align="center"
                           width="50">
            <template slot-scope="scope">
              <el-radio-group v-model="selectedPdClm" @change="selectedPdClmChanged">
                <el-radio :label="scope.row">{{ '' }}</el-radio>
              </el-radio-group>
            </template>
          </el-table-column>
          <el-table-column :label="$t('table.id')" align="center" type="index" width="50"></el-table-column>
          <el-table-column :filter-method="filters_pdBnftCtrlLimLevel_mehtod" :filters="filters_pdBnftCtrlLimLevel"
                           :label="$t('i18nView.pdBnftCtrlLimLevel')"
                           align="center"
                           prop="pdBnftCtrlLimLevel">
            <template v-slot="scope">
              {{ scope.row.pdBnftCtrlLimLevel | filter_pdBnftCtrlLimLevel }}
            </template>
          </el-table-column>
         <el-table-column :label="$t('i18nView.pdBnftCtrlLimCode')" align="center"
                       prop="pdBnftCtrlLimCode">
                  <template v-slot="scope">
                          <span>{{
                              _.map(scope.row.pdtempClmCtrlLimRelaVoList, item => {
                                return item.pdBnftCtrlConCode + ':' + item.pdBnftCtrlConName
                              }).join(', ')
                            }}</span>
                  </template>
          </el-table-column>
          <el-table-column align="center" :label="$t('pdtempPdMedFeeBill.pdBnftFactorLimValue')" prop="pdBnftFactorLimValue">
             <template v-slot="scope">{{ scope.row.pdBnftFactorType | filter_pdObPeriodStartRule }}</template>
          </el-table-column>
          <el-table-column align="center" :label="$t('pdtempPdMedFeeBill.Obperiod')" prop="pdBnftFactorValue">
            <template v-slot="scope">
              {{ scope.row.pdBnftFactorValue }}{{ scope.row.pdBnftFactorValueUnit | filter_pdBnftRuleObservationUnit }}
            </template>
          </el-table-column>
           <el-table-column align="center" :label="$t('pdtempPdMedFeeBill.obperiodCalcFormula')" prop="pdBnftFactorValueCalCode" width="150px">
            <template slot-scope="scope">
              <span>{{ scope.row.pdBnftFactorValueCalCode }}
                <svg-icon v-if="scope.row.pdBnftFactorValueCalCode" icon-class="calc" style="color: #606266;font-size: 18px;cursor: pointer"
                            @click="toFormula(scope.row)"/></span>
            </template>
          </el-table-column>
          <el-table-column align="center" :label="$t('pdtempPdMedFeeBill.pdBnftCumType')" prop="pdBnftCumType">
            <template v-slot="scope">{{ scope.row.pdBnftCumType | filter_pdBnftCumType }}</template>
          </el-table-column>
          <el-table-column align="center" :label="$t('pdtempPdMedFeeBill.pdBnftCumPeriod')" prop="pdBnftCumFrequency">
            <template v-slot="scope">{{ scope.row.pdBnftCumFrequency | filter_pdBnftCumFrequency }}</template>
          </el-table-column>
          <el-table-column align="center" :label="$t('pdtempPdMedFeeBill.actions')" width="100">
            <template slot-scope="scope">
              <cus-del-btn icon="el-icon-delete" size="mini" type="danger" @ok="deleteBnftForm(scope.row)"></cus-del-btn>
            </template>
          </el-table-column>
          <!--<el-table-column align="center" label="关联项" width="100">
            <template v-slot="scope">
              <el-button dialog-disable="disable" size="small" type="text" @click="showRelatedItems(scope.row)">>></el-button>
            </template>
          </el-table-column>-->
        </el-table>
        <cus-pagination ref="page_O" v-model="pdQuotaItemList" :autoBuild="false" :pageSize="5" :params="params"
                        url="/product-compensation/base/pagePdtempClmCtrlLimVo"/>
        <cus-form-title :label="$t('pdClaimVerificationRules1.pdObservationCustom')"></cus-form-title>
        <el-form ref="form_pdQuotaItem3" :model="form_pdQuotaItem" :rules="form_pdQuotaItem_rules"
                 label-width="110px">
          <cus-row>
            <cus-col :span="8">
              <el-form-item :label="$t('i18nView.pdBnftCtrlLimLevel')" prop="pdBnftCtrlLimLevel" key="pdBnftCtrlLimLevel">
                  <cus-select v-model="form_pdQuotaItem.pdBnftCtrlLimLevel" :codetype="'limitlevel'"
                              @change="pdBnftCtrlLimLevelChanged" :filter="pdBnftCtrlLimLevelFilter" ></cus-select>
              </el-form-item>
            </cus-col>
            <cus-col
              v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='4' || form_pdQuotaItem.pdBnftCtrlLimLevel==='6' || form_pdQuotaItem.pdBnftCtrlLimLevel==='14'|| form_pdQuotaItem.pdBnftCtrlLimLevel==='10'"
              :span="8">
              <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='4'" :label="$t('i18nView.programInformation')"  prop="pdBnftCtrlLimCode" key="pdBnftCtrlLimCode"> 
                <el-select v-model="form_pdQuotaItem.pdBnftCtrlLimCode" :disabled="Object.keys(selectedPdClm).length > 0" clearable filterable multiple>
                  <el-option v-for="item in pdProgOptions"
                             :key="item.id"
                             :label="item.pdProgCode+':'+item.pdProgName"
                             :value="item.pdProgCode">
                  </el-option>
                </el-select>
              </el-form-item>
              <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='6'" :label="$t('i18nView.guarantee')"  prop="pdBnftCtrlLimCode" key="pdBnftCtrlLimCode">
                <el-select v-model="form_pdQuotaItem.pdBnftCtrlLimCode" :disabled="Object.keys(selectedPdClm).length > 0" clearable filterable multiple>
                  <el-option v-for="item in pdBnftOptions"
                             :key="item.id"
                             :label="item.pdBnftCode+':'+item.pdBnftName"
                             :value="item.pdBnftCode">
                  </el-option>
                </el-select>
              </el-form-item>
              <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='14'" :label="$t('pdClaimVerificationRules1.AssociatedGuaranteeDetails')"  prop="pdBnftCtrlLimCode" key="pdBnftCtrlLimCode">
                <el-select v-model="form_pdQuotaItem.pdBnftCtrlLimCode"  :disabled="Object.keys(selectedPdClm).length > 0" clearable filterable multiple>
                  <el-option v-for="item in pdClmBnftOptions"
                             :key="item.id"
                             :label="item.pdClmBnftCode+':'+item.pdClmBnftName"
                             :value="item.pdClmBnftCode">
                  </el-option>
                </el-select>
              </el-form-item>
              <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='10'" :label="$t('i18nView.clmMedFee')"  prop="pdBnftCtrlLimCode" key="pdBnftCtrlLimCode">
                <el-select v-model="form_pdQuotaItem.pdBnftCtrlLimCode" :disabled="Object.keys(selectedPdClm).length > 0" clearable filterable multiple>
                  <el-option v-for="item in pdMedFeeOptions" :key="item.id" :label="item.pdMedFeeCode+':'+item.pdMedFeeName"
                  :value="item.pdMedFeeCode">
                  </el-option>
                </el-select>
              </el-form-item>
            </cus-col>

          <!-- 限制级别要素 -->
            <cus-col :span="8">
              <!-- 限制级别要素 -->
              <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='9'"
                            :label="$t('pdClaimVerificationRules1.pdAssociatedBillMoney')"
                            prop="pdtempPdMedFeeBill" key="pdtempPdMedFeeBill">
                <el-select v-model="form_pdQuotaItem.pdtempPdMedFeeBill"  :disabled="Object.keys(selectedPdClm).length > 0" clearable filterable multiple value-key="id">
                  <el-option v-for="item in pdMedFeeOptions"
                              :key="item.id"
                              :label="item.pdMedFeeCode+':'+item.pdMedFeeName"
                              :value="item">
                  </el-option>
                </el-select>
              </el-form-item>
              <el-form-item v-show="form_pdQuotaItem.pdBnftCtrlLimLevel==='1'" :label="$t('i18nView.pdSingle')">
                    <el-input disabled="disabled" v-model="product.pdCode+':'+product.pdName"></el-input>
              </el-form-item>
              <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='6'"
                            :label="$t('pdClaimVerificationRules1.pdBnftCtrlConCode')"
                        >
                <el-select v-model="form_pdQuotaItem.pdtempPdBnftList" clearable disabled filterable multiple
                           value-key="id">
                  <el-option v-for="PdBnftitem in pdBnftList"
                             :key="PdBnftitem.id"
                             :label="PdBnftitem.pdBnftCode+':'+PdBnftitem.pdBnftName"
                             :value="PdBnftitem">
                  </el-option>
                </el-select>
                <el-button dialog-disable="disable" type="text" @click="openpdBnftDetail">{{$t('i18nView.more')}}</el-button>
              </el-form-item>
              <el-form-item
                v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='5' || form_pdQuotaItem.pdBnftCtrlLimLevel==='11'"
                :label="$t('pdClaimVerificationRules1.pdBnftFactorLimType')" prop="pdtempPdBnft" key="pdtempPdBnft"
                >
                <el-select v-model="form_pdQuotaItem.pdtempPdBnft" :disabled="Object.keys(selectedPdClm).length > 0"  clearable filterable multiple value-key="id">
                  <el-option v-for="item in pdBnftOptions"
                             :key="item.id"
                             :label="item.pdBnftCode+':'+item.pdBnftName"
                             :value="item">
                  </el-option>
                </el-select>
              </el-form-item>
              <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='13'" :label="$t('i18nView.bnftinfo')" prop="pdClmBnftCode"  key="pdClmBnftCode">
                <el-select v-model="form_pdQuotaItem.pdClmBnftCode" :disabled="Object.keys(selectedPdClm).length > 0" clearable filterable value-key="id" multiple>
                  <el-option v-for="item in pdClmBnftOptions"
                             :key="item.id"
                             :label="item.pdClmBnftCode+':'+item.pdClmBnftName"
                             :value="item">
                  </el-option>
                </el-select>
              </el-form-item>
              <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='14'" :label="$t('i18nView.AssociatedGuaranteeDetails')">
                <el-select v-model="form_pdQuotaItem.pdBnftCtrlConCode" clearable disabled filterable multiple
                           value-key="id">
                  <el-option v-for="pdClmBnft in pdClmBnftList"
                             :key="pdClmBnft.id"
                             :label="pdClmBnft.pdClmBnftCode+':'+pdClmBnft.pdClmBnftName"
                             :value="pdClmBnft">
                  </el-option>
                </el-select>
                <el-button dialog-disable="disable" type="text" @click="openPdClmBnftDetail">{{$t('i18nView.more')}}</el-button>
              </el-form-item>
              <el-form-item v-show="form_pdQuotaItem.pdBnftCtrlLimLevel==='4'"
                            :label="$t('pdClaimVerificationRules1.AssociatedPlan')"
                           >
                <el-select v-model="form_pdQuotaItem.pdtempPdProgList" clearable disabled filterable multiple
                           value-key="id">
                  <el-option v-for="item in pdProgList"
                             :key="item.id"
                             :label="item.pdProgCode+':'+item.pdProgName"
                             :value="item">
                  </el-option>
                </el-select>
                <el-button dialog-disable="disable" type="text" @click="openpdProgDetail">{{$t('i18nView.more')}}</el-button>
              </el-form-item>
              <el-form-item v-if="form_pdQuotaItem.pdBnftCtrlLimLevel==='3'"
                            :label="$t('pdClaimVerificationRules1.pdPlan')"
                              prop="pdtempPdProg"
                              key = "pdtempPdProg"
                            >
                <el-select v-model="form_pdQuotaItem.pdtempPdProg" clearable filterable multiple value-key="id">
                  <el-option v-for="item in pdProgOptions"
                             :key="item.id"
                             :label="item.pdProgCode+':'+item.pdProgName"
                             :value="item">
                  </el-option>
                </el-select>
              </el-form-item>
              <el-form-item v-show="form_pdQuotaItem.pdBnftCtrlLimLevel==='2'"
                            :label="$t('pdClaimVerificationRules1.pdRelated')">
                <el-select v-model="form_pdQuotaItem.pdtempPdInfoList" clearable disabled filterable multiple
                           value-key="id">
                  <el-option v-for="item in pdList"
                             :key="item.id"
                             :label="item.pdCode+':'+item.pdName"
                             :value="item">
                  </el-option>
                </el-select>
                <el-button dialog-disable="disable" type="text" @click="openpdPdDetail">{{$t('i18nView.more')}}</el-button>
              </el-form-item>
              <el-form-item v-show="form_pdQuotaItem.pdBnftCtrlLimLevel==='10'"
                              :label="$t('pdClaimVerificationRules1.AssociatedBillMoney')"
                             >
                  <el-select v-model="form_pdQuotaItem.pdtempPdMedFeeBillList" clearable disabled filterable
                             multiple
                             value-key="id">
                    <el-option v-for="item in PdMedFeeBillList"
                               :key="item.id"
                               :label="item.pdMedFeeCode+':'+item.pdMedFeeName"
                               :value="item">
                    </el-option>
                  </el-select>
               <el-button dialog-disable="disable" type="text" @click="openpdMedFeeBillDetail">{{$t('i18nView.more')}}</el-button>
           </el-form-item>
            </cus-col>
            <cus-col
              v-if="form_pdQuotaItem.pdBnftCtrlLimLevel!=='4' && form_pdQuotaItem.pdBnftCtrlLimLevel!=='6' && form_pdQuotaItem.pdBnftCtrlLimLevel!=='14' && form_pdQuotaItem.pdBnftCtrlLimLevel!=='10'"
              :span="8"></cus-col>
          </cus-row>
          <cus-row>
            <cus-col :span="8">
              <el-form-item :label="$t('i18nView.pdBnftStartBasisDay')">
                <cus-radio v-model="form_pdQuotaItem.pdBnftFactorType"
                           :codetype="'pdObPeriodStartRule'"></cus-radio>
              </el-form-item>
            </cus-col>
            <cus-col :span="8">
            </cus-col>
            <cus-col :span="8"></cus-col>
          </cus-row>
          <cus-row>
             <cus-col :span="8">
              <el-form-item :label="$t('i18nView.Obperiod')">
                <cus-col>
                  <el-input v-model="form_pdQuotaItem.pdBnftFactorValue" class="input-with-select">
                    <cus-select slot="append" v-model="form_pdQuotaItem.pdBnftFactorValueUnit" codetype="obPeriodUnit"
                                style="width: 90px"></cus-select>
                  </el-input>
                </cus-col>
              </el-form-item>
            </cus-col>
            <cus-col :span="8">
              <el-form-item :label="$t('i18nView.pdBnftCumType')">
                <cus-radio v-model="form_pdQuotaItem.pdBnftCumType" :codetype="'pdBnftCumType'"></cus-radio>
              </el-form-item>
            </cus-col>
            <cus-col :span="8">
              <el-form-item :label="$t('pdClaimVerificationRules1.pdBnftCumFrequencyUnit')">
                  <cus-radio v-model="form_pdQuotaItem.pdBnftCumFrequencyUnit" :codetype="'pdBnftCumFrequencyUnit'"
                             filter="1$2$3"></cus-radio>
              </el-form-item>
            </cus-col>
          </cus-row>
          <cus-row>
             <cus-col :span="8">
              <el-form-item :label="$t('pdClaimVerificationRules1.observationPeriodCalculation')">
                <el-switch
                  v-model="calcFlag"
                  :disabled="form_pdQuotaItem.pdBnftCtrlLimLevel!=5 && form_pdQuotaItem.pdBnftCtrlLimLevel!=6"
                  active-value="Y" inactive-value="N">
                </el-switch>
              </el-form-item>
            </cus-col>
          </cus-row>
          <div v-if="calcFlag === 'Y'">
            <cus-form-title :label="$t('pdClaimVerificationRules1.observationCustom')"
                           ></cus-form-title>
            <el-row style="margin-top: 10px">
              <el-form-item :label="$t('pdClaimVerificationRules1.observationCalc')">
                <el-input v-model="form_pdQuotaItem.pdBnftFactorValueCalCode" readonly>
                  <svg-icon slot="suffix" icon-class="calc" style="color: #606266;font-size: 18px;cursor: pointer"
                            @click="toFormula(null)"/>
                </el-input>
              </el-form-item>
            </el-row>
          </div>
        </el-form>
        <div>
          <el-form :disabled="showPageFlag === '1'" style="width:98%;margin: 20px 0 0 0">
            <el-form-item style="text-align: right">
              <!--按钮-->
              <el-button dialog-disable="disable" v-if="Object.keys(selectedPdClm).length === 0" v-auth="'product-compensation:save'"
                         icon="el-icon-success"
                         size="small" type="primary" @click="saveObservationPeriod('O')">{{
                  $t('table.save')
                }}
              </el-button>
              <el-button dialog-disable="disable" v-if="Object.keys(selectedPdClm).length > 0" v-auth="'product-compensation:save'"
                         icon="el-icon-success"
                         size="small"
                         style="margin-right: 10px" type="primary" @click="updateCtrl('O')">{{
                  $t('table.update')
                }}
              </el-button>
              <!--<cus-del-btn v-if="Object.keys(selectedPdClm).length > 0" v-auth="'product-compensation:delete'"
                           :buttonText="$t('table.delete')"
                           size="small" style="margin-right: 10px" @ok="deleteObservationPeriod">
              </cus-del-btn> -->
              <el-button dialog-disable="disable" icon="el-icon-refresh" size="small" type="warning" @click="refresh('O')">
                {{ $t('tagsView.refresh') }}
              </el-button>
            </el-form-item>
          </el-form>
        </div>
      </el-tab-pane>

      <!-- 产品理赔信息（给发布的目标系统做数据迁移使用） -->
      <!--<el-tab-pane label="产品理赔信息定义" :label="$t('pdClaimVerificationRules1.pdClaimDefinition')" name="pdClaimDefinition">
        <div>
          <cus-form-title label="理赔信息定义" :label="$t('pdClaimVerificationRules1.claimDefinition')"></cus-form-title>
          <el-form ref="form_pdQuotaItem" :model="form_pdClaimDefinition" label-width="110px" style="width:98%;"
                   :rules="form_pdClaimDefinition_rules">
            <el-row type="flex" justify="left">
              <cus-col>
                <el-form-item label="社保标记" :label="$t('pdClaimVerificationRules1.socialSecurityType')">
                  <el-switch v-model="form_pdClaimDefinition.accFundFlag"  active-color="#13ce66" active-value="Y"
                             inactive-value="N">
                  </el-switch>
                </el-form-item>
              </cus-col>
              <cus-col>
                <el-form-item label="赔付比例" :label="$t('pdClaimVerificationRules1.compensationRatio')" prop="accountName">
                  <el-input :placeholder="$t('pdClaimVerificationRules1.controlSequenceAddOne')" clearable v-model="form_pdQuotaItem.pdBnftCtrlOrder"
                            ></el-input>
                </el-form-item>
              </cus-col>
            </el-row>
          </el-form>
        </div>
        <div>
          <el-form label-width="160px" style="width:98%;margin: 20px 0 0 0">
            <el-form-item align="right">
              &lt;!&ndash;按钮&ndash;&gt;
              <el-button dialog-disable="disable" @click="form_pdQuotaItem_add" icon="el-icon-success" type="primary"
                         v-auth="'pdtemp-pd-acc:inFlow:addAll'" v-if="" >{{$t('table.save') }}
              </el-button>
              <el-button dialog-disable="disable" @click="form_pdQuotaItem_refresh" icon="el-icon-refresh" type="warning">{{ $t('tagsView.refresh') }}
              </el-button>
            </el-form-item>
          </el-form>
        </div>
      </el-tab-pane>-->

    </el-tabs>
  </div>

  <!-- 弹窗 -->
  <!-- 产品弹窗 -->
  <el-dialog v-if="showPdMore" v-dialog-drag :close-on-click-modal="false" :close-on-press-escape="false"
             :show-close=false
             :visible.sync="showPdMore" center top="8vh" width="1200px">
    <pdtemppdinfo :pdBnftCtrlCode="pdBnftCtrlCode" @backToFeeBill="backToFeeBill"></pdtemppdinfo>
  </el-dialog>
  <!-- 方案弹窗 -->
  <el-dialog v-if="showProgMore" v-dialog-drag :close-on-click-modal="false" :close-on-press-escape="false"
             :show-close=false
             :visible.sync="showProgMore" center top="8vh" width="1200px">
    <pdtempproginfo :pdBnftCtrlCode="pdBnftCtrlCode" @backToFeeBill="backToFeeBill"></pdtempproginfo>
  </el-dialog>
  <!-- 保障弹窗 -->
  <el-dialog v-if="showBnftMore" v-dialog-drag :close-on-click-modal="false" :close-on-press-escape="false"
             :show-close=false
             :visible.sync="showBnftMore" center top="8vh" width="1200px">
    <pdtemppdbnftinfo :pdBnftCtrlCode="pdBnftCtrlCode" @backToFeeBill="backToFeeBill"></pdtemppdbnftinfo>
  </el-dialog>
  <!-- 保障明细弹窗 -->
  <el-dialog v-if="showClmBnftMore" v-dialog-drag :close-on-click-modal="false" :close-on-press-escape="false"
             :show-close=false
             :visible.sync="showClmBnftMore" center top="8vh" width="1200px">
    <pdtemppdclmbnftinfo :pdBnftCtrlCode="pdBnftCtrlCode" moreType="clmbnft"
                         @backToFeeBill="backToFeeBill"></pdtemppdclmbnftinfo>
  </el-dialog>
      <!-- 赔付弹窗 -->
   <el-dialog v-dialog-drag :close-on-click-modal="false" :show-close=false :visible.sync="showMedBnftMore" center
             top="8vh" width="1200px">
    <pdtemppdbnftmedinfo :pdBnftCtrlCode="pdBnftCtrlCode" :showMedBnftMore="showMedBnftMore"
                         @backToFeeBill="backToFeeBill"></pdtemppdbnftmedinfo>
  </el-dialog>

  <!-- 公式弹窗 -->
  <el-dialog v-if="showFormula" v-dialog-drag :close-on-click-modal="false" :close-on-press-escape="false"
             :show-close=false
             :visible.sync="showFormula" center top="8vh" width="80%">
    <compensationFormula ref="compensationFormula" :displayForm="displayForm" @bringCalcCode="bringCalcCode"
                         @changeDialogVisible_formula="changeDialogVisible_formula"
                         @changeDialogVisible_formulaSelect="changeDialogVisible_formulaSelect"></compensationFormula>
    <el-dialog v-if="showFormulaSelect" v-dialog-drag :close-on-click-modal="false" :show-close=false
               :visible.sync="showFormulaSelect" append-to-body center top="8vh" width="70%">
      <compensationFormulaSelect :displayForm="displayForm" @bringCalcCode="bringCalcCode"
                                 @changeDialogVisible_formulaSelect="changeDialogVisible_formulaSelect"></compensationFormulaSelect>
    </el-dialog>
  </el-dialog>

  <!-- 关联项弹窗 -->
  <el-dialog v-if="showRelatedItemsFlag" v-dialog-drag :close-on-click-modal="false" :close-on-press-escape="false"
             :show-close=false
             :visible.sync="showRelatedItemsFlag" center top="8vh" width="1200px">
    <el-page-header content="关联项" @back="showRelatedItemsFlag = false"></el-page-header>
    <div
      v-if="pdBnftCtrlLimLevelInRelatedItems === '1' || pdBnftCtrlLimLevelInRelatedItems === '2' || pdBnftCtrlLimLevelInRelatedItems === '12'">
      <cus-table-title :label="$t('i18nView.pdRelated')"></cus-table-title>
      <el-table :data="relatedItemList" border element-loading-text="Loading" highlight-current-row size="mini">
        <el-table-column :label="$t('table.id')" align="center" type="index" width="50"></el-table-column>
        <el-table-column align="center" :label="$t('i18nView.pdCode')" prop="pdCode"></el-table-column>
        <el-table-column align="center" :label="$t('i18nView.pdName')" prop="pdName"></el-table-column>
        <el-table-column align="center" :label="$t('customComponents.pdEdition')" prop="pdEdition"></el-table-column>
      </el-table>
    </div>
    <div v-if="pdBnftCtrlLimLevelInRelatedItems === '3' || pdBnftCtrlLimLevelInRelatedItems === '4'">
      <cus-table-title :label="$t('i18nView.AssociatedPlan')"></cus-table-title>
      <el-table :data="relatedItemList" border element-loading-text="Loading" highlight-current-row size="mini">
        <el-table-column :label="$t('table.id')" align="center" type="index" width="50"></el-table-column>
        <el-table-column align="center" :label="$t('i18nView.pdCode')" prop="pdCode"></el-table-column>
        <el-table-column align="center" :label="$t('i18nView.pdName')" prop="pdName"></el-table-column>
        <el-table-column align="center" :label="$t('customComponents.pdEdition')" prop="pdEdition"></el-table-column>
        <el-table-column align="center" :label="$t('i18nView.schemeCode')" prop="pdProgCode"></el-table-column>
        <el-table-column align="center" :label="$t('i18nView.programName')" prop="pdProgName"></el-table-column>
      </el-table>
    </div>
    <div
      v-if="pdBnftCtrlLimLevelInRelatedItems === '5' || pdBnftCtrlLimLevelInRelatedItems === '6' || pdBnftCtrlLimLevelInRelatedItems === '11'">
      <cus-table-title :label="$t('i18nView.pdBnftCtrlConCode')"></cus-table-title>
      <el-table :data="relatedItemList" border element-loading-text="Loading" highlight-current-row size="mini">
        <el-table-column :label="$t('table.id')" align="center" type="index" width="50"></el-table-column>
        <el-table-column align="center" :label="$t('i18nView.pdCode')" prop="pdCode"></el-table-column>
        <el-table-column align="center" :label="$t('i18nView.pdName')" prop="pdName"></el-table-column>
        <el-table-column align="center" :label="$t('customComponents.pdEdition')" prop="pdEdition"></el-table-column>
        <el-table-column align="center" :label="$t('i18nView.pdBnftType')" prop="pdBnftType">
          <template v-slot="scope">
            {{ scope.row.pdBnftType | filter_pdBnftType }}
          </template>
        </el-table-column>
        <el-table-column align="center" :label="$t('i18nView.guaranteeCode')" prop="pdBnftCode"></el-table-column>
        <el-table-column align="center":label="$t('i18nView.pdBnftName')" prop="pdBnftName"></el-table-column>
        <el-table-column align="center" :label="$t('i18nView.bnftDtName')" prop="pdBnftDetailType">
          <template v-slot="scope">
            {{ scope.row.pdBnftDetailType | filter_pdBnftDetailType }}
          </template>
        </el-table-column>
      </el-table>
    </div>
    <div v-if="pdBnftCtrlLimLevelInRelatedItems === '7' || pdBnftCtrlLimLevelInRelatedItems === '8'">
      <cus-table-title :label="$t('i18nView.AssociatedBill')"></cus-table-title>
      <el-table :data="relatedItemList" border element-loading-text="Loading" highlight-current-row size="mini">
        <el-table-column :label="$t('table.id')" align="center" type="index" width="50"></el-table-column>
        <el-table-column align="center" :label="$t('i18nView.pdClmBnftCode')" prop="pdClmBnftCode"></el-table-column>
        <el-table-column align="center" :label="$t('i18nView.medBillType')" prop="pdMedBillType">
          <template v-slot="scope">
            {{ scope.row.pdMedBillType | filter_medBillType }}
          </template>
        </el-table-column>
      </el-table>
    </div>
    <div v-if="pdBnftCtrlLimLevelInRelatedItems === '9' || pdBnftCtrlLimLevelInRelatedItems === '10'">
      <cus-table-title :label="$t('i18nView.AssociatedBillMoney')"></cus-table-title>
      <el-table :data="relatedItemList" border element-loading-text="Loading" highlight-current-row size="mini">
        <el-table-column :label="$t('table.id')" align="center" type="index" width="50"></el-table-column>
        <el-table-column align="center" :label="$t('i18nView.medBillType')" prop="pdMedBillType">
          <template v-slot="scope">
            {{ scope.row.pdMedBillType | filter_medBillType }}
          </template>
        </el-table-column>
        <el-table-column align="center" :label="$t('i18nView.pdMedBillCode')" prop="pdMedFeeCode"></el-table-column>
        <el-table-column align="center" :label="$t('i18nView.feeType')" prop="medFeeBillName"></el-table-column>
        <el-table-column align="center" :label="$t('i18nView.feeName')" prop="pdMedFeeName"></el-table-column>
      </el-table>
    </div>
  </el-dialog>
</cus-wraper>
"},null]}