{"remainingRequest":"D:\\86181\\Desktop\\product\\pcs-product-view\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\86181\\Desktop\\product\\pcs-product-view\\src\\components\\TreeTable\\index.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\86181\\Desktop\\product\\pcs-product-view\\src\\components\\TreeTable\\index.vue","mtime":1609847106317},{"path":"D:\\86181\\Desktop\\product\\pcs-product-view\\node_modules\\css-loader\\dist\\cjs.js","mtime":1706753188288},{"path":"D:\\86181\\Desktop\\product\\pcs-product-view\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1706753191924},{"path":"D:\\86181\\Desktop\\product\\pcs-product-view\\node_modules\\postcss-loader\\src\\index.js","mtime":1706753189537},{"path":"D:\\86181\\Desktop\\product\\pcs-product-view\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1706753187435},{"path":"D:\\86181\\Desktop\\product\\pcs-product-view\\node_modules\\vue-loader\\lib\\index.js","mtime":1706753190941}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBrZXlmcmFtZXMgdHJlZVRhYmxlU2hvdyB7CiAgZnJvbSB7CiAgICBvcGFjaXR5OiAwOwogIH0KICB0byB7CiAgICBvcGFjaXR5OiAxOwogIH0KfQoKQC13ZWJraXQta2V5ZnJhbWVzIHRyZWVUYWJsZVNob3cgewogIGZyb20gewogICAgb3BhY2l0eTogMDsKICB9CiAgdG8gewogICAgb3BhY2l0eTogMTsKICB9Cn0KCg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/TreeTable","sourcesContent":["<template>\r\n  <el-table :data=\"tableData\" :row-style=\"showRow\" v-bind=\"$attrs\" v-on=\"$listeners\">\r\n    <slot name=\"selection\"/>\r\n    <slot name=\"pre-column\"/>\r\n    <el-table-column\r\n      :align=\"item.align||'center'\"\r\n      :header-align=\"item.headerAlign\"\r\n      :key=\"item.key\"\r\n      :label=\"item.label\"\r\n      :width=\"item.width\"\r\n      v-for=\"item in columns\"\r\n    >\r\n      <template slot-scope=\"scope\">\r\n        <slot :name=\"item.key\" :scope=\"scope\">\r\n          <template v-if=\"item.expand\">\r\n            <span :style=\"`display:inline-block;height:10px;width:${scope.row._level*30}px;`\"/>\r\n            <span @click=\"toggleExpanded(scope.$index)\" class=\"tree-ctrl\" v-if=\"showSperadIcon(scope.row)\">\r\n              <i class=\"el-icon-caret-right\" style=\"color: #606266;font-size: 18px\" v-if=\"!scope.row._expand\"/>\r\n              <i class=\"el-icon-caret-bottom\" style=\"color: #606266;font-size: 18px\" v-else/>\r\n              <svg-icon :icon-class=\"getIconClass(scope.row)\" style=\"color: #606266;font-size: 18px\"/>\r\n            </span>\r\n            <span v-else>\r\n              <svg-icon :icon-class=\"getIconClass(scope.row)\" style=\"color: #606266;font-size: 18px;margin-left: 18px\"/>\r\n            </span>\r\n          </template>\r\n          <template v-if=\"item.checkbox\">\r\n            <el-checkbox\r\n              :indeterminate=\"scope.row._select\"\r\n              :style=\"{'padding-left':+scope.row._level*indent + 'px'} \"\r\n              @change=\"handleCheckAllChange(scope.row)\"\r\n              v-if=\"scope.row[defaultChildren]&&scope.row[defaultChildren].length>0\"\r\n              v-model=\"scope.row._select\"\r\n            />\r\n            <el-checkbox\r\n              :style=\"{'padding-left':+scope.row._level*indent + 'px'} \"\r\n              @change=\"handleCheckAllChange(scope.row)\"\r\n              v-else\r\n              v-model=\"scope.row._select\"\r\n            />\r\n          </template>\r\n          {{ scope.row[item.key] }}\r\n        </slot>\r\n      </template>\r\n    </el-table-column>\r\n  </el-table>\r\n</template>\r\n\r\n<script>\r\n  import treeToArray, {addAttrs} from './eval.js'\r\n\r\n  export default {\r\n    name: 'TreeTable',\r\n    props: {\r\n      data: {\r\n        type: Array,\r\n        required: true,\r\n        default: () => []\r\n      },\r\n      columns: {\r\n        type: Array,\r\n        default: () => []\r\n      },\r\n      defaultExpandAll: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      defaultChildren: {\r\n        type: String,\r\n        default: 'children'\r\n      },\r\n      indent: {\r\n        type: Number,\r\n        default: 50\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        guard: 1\r\n      }\r\n    },\r\n    computed: {\r\n      children() {\r\n        return this.defaultChildren\r\n      },\r\n      tableData() {\r\n        const data = this.data\r\n        if (this.data.length === 0) {\r\n          return []\r\n        }\r\n        addAttrs(data, {\r\n          expand: this.defaultExpandAll,\r\n          children: this.defaultChildren\r\n        })\r\n        return treeToArray(data, this.defaultChildren)\r\n      }\r\n    },\r\n    methods: {\r\n      addBrother(row, data) {\r\n        if (row._parent) {\r\n          row._parent.children.push(data)\r\n        } else {\r\n          this.data.push(data)\r\n        }\r\n      },\r\n      addChild(row, data) {\r\n        if (!row.children) {\r\n          this.$set(row, 'children', [])\r\n        }\r\n        row.children.push(data)\r\n      },\r\n      delete(row) {\r\n        const {_index, _parent} = row\r\n        if (_parent) {\r\n          _parent.children.splice(_index, 1)\r\n        } else {\r\n          this.data.splice(_index, 1)\r\n        }\r\n      },\r\n      getData() {\r\n        return this.tableData\r\n      },\r\n      showRow: function ({row}) {\r\n        const parent = row._parent\r\n        const show = parent ? parent._expand && parent._show : true\r\n        row._show = show\r\n        return show ? {animation: 'treeTableShow 1s'} : {display: 'none'}\r\n      },\r\n      showSperadIcon(record) {\r\n        return record[this.children] && record[this.children].length > 0\r\n      },\r\n      getIconClass(row) {\r\n        if (row.type === 'menu' || row.type === 'button' && row.children.length > 0) {\r\n          return 'page'\r\n        } else {\r\n          return 'button'\r\n        }\r\n      },\r\n      toggleExpanded(trIndex) {\r\n        const record = this.tableData[trIndex]\r\n        record._expand = !record._expand\r\n      },\r\n      handleCheckAllChange(row) {\r\n        this.selcetRecursion(row, row._select, this.defaultChildren)\r\n      },\r\n      selcetRecursion(row, select, children = 'children') {\r\n        if (select) {\r\n          this.$set(row, '_expand', true)\r\n          this.$set(row, '_show', true)\r\n        }\r\n        const sub_item = row[children]\r\n        if (sub_item && sub_item.length > 0) {\r\n          sub_item.map(child => {\r\n            child._select = select\r\n            this.selcetRecursion(child, select, children)\r\n          })\r\n        }\r\n      },\r\n      updateTreeNode(item) {\r\n        return new Promise(resolve => {\r\n          const {_id, _parent} = item\r\n          const index = _id.split('-').slice(-1)[0] // get last index\r\n          if (_parent) {\r\n            _parent.children.splice(index, 1, item)\r\n            resolve(this.data)\r\n          } else {\r\n            this.data.splice(index, 1, item)\r\n            resolve(this.data)\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style>\r\n  @keyframes treeTableShow {\r\n    from {\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n\r\n  @-webkit-keyframes treeTableShow {\r\n    from {\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n\r\n</style>\r\n"]}]}